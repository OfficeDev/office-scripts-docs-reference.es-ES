### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.DataValidationRule:interface'
    summary: La regla de validación de datos contiene distintos tipos de validación de datos. Solo se puede usar uno de ellos a la vez según el DataValidationType de Excel.
    name: Excel.DataValidationRule
    fullName: Excel.DataValidationRule
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.DataValidationRule#custom:member'
      - 'excel!Excel.DataValidationRule#date:member'
      - 'excel!Excel.DataValidationRule#decimal:member'
      - 'excel!Excel.DataValidationRule#list:member'
      - 'excel!Excel.DataValidationRule#textLength:member'
      - 'excel!Excel.DataValidationRule#time:member'
      - 'excel!Excel.DataValidationRule#wholeNumber:member'
  - uid: 'excel!Excel.DataValidationRule#custom:member'
    summary: Criterios de validación de datos personalizados.
    name: custom
    fullName: custom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'custom?: CustomDataValidation;'
      return:
        type:
          - 'excel!Excel.CustomDataValidation:interface'
  - uid: 'excel!Excel.DataValidationRule#date:member'
    summary: Criterios de validación de datos de fecha.
    name: date
    fullName: date
    langs:
      - typeScript
    type: property
    syntax:
      content: 'date?: DateTimeDataValidation;'
      return:
        type:
          - 'excel!Excel.DateTimeDataValidation:interface'
  - uid: 'excel!Excel.DataValidationRule#decimal:member'
    summary: Criterios de validación de datos decimales.
    name: decimal
    fullName: decimal
    langs:
      - typeScript
    type: property
    syntax:
      content: 'decimal?: BasicDataValidation;'
      return:
        type:
          - 'excel!Excel.BasicDataValidation:interface'
  - uid: 'excel!Excel.DataValidationRule#list:member'
    summary: Criterios de validación de datos de lista.
    name: list
    fullName: list
    langs:
      - typeScript
    type: property
    syntax:
      content: 'list?: ListDataValidation;'
      return:
        type:
          - 'excel!Excel.ListDataValidation:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Decision");
              let nameRange = 
                  sheet.tables.getItem("NameOptionsTable").columns.getItem("Baby Name").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              nameRange.dataValidation.clear();

              let nameSourceRange = context.workbook.worksheets.getItem("Names").getRange("A1:A3");

              let approvedListRule = {
                  list: {
                      inCellDropDown: true,
                      source: nameSourceRange
                  }
              };
              nameRange.dataValidation.rule = approvedListRule;

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.DataValidationRule#textLength:member'
    summary: Criterios de validación de datos TextLength.
    name: textLength
    fullName: textLength
    langs:
      - typeScript
    type: property
    syntax:
      content: 'textLength?: BasicDataValidation;'
      return:
        type:
          - 'excel!Excel.BasicDataValidation:interface'
  - uid: 'excel!Excel.DataValidationRule#time:member'
    summary: Criterios de validación de datos de tiempo.
    name: time
    fullName: time
    langs:
      - typeScript
    type: property
    syntax:
      content: 'time?: DateTimeDataValidation;'
      return:
        type:
          - 'excel!Excel.DateTimeDataValidation:interface'
  - uid: 'excel!Excel.DataValidationRule#wholeNumber:member'
    summary: Criterios de validación de datos de WholeNumber.
    name: wholeNumber
    fullName: wholeNumber
    langs:
      - typeScript
    type: property
    syntax:
      content: 'wholeNumber?: BasicDataValidation;'
      return:
        type:
          - 'excel!Excel.BasicDataValidation:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Decision");
              let rankingRange = sheet.tables.getItem("NameOptionsTable").columns.getItem("Ranking").getDataBodyRange();

              // When you are developing, it is a good practice to
              // clear the dataValidation object with each run of your code.
              rankingRange.dataValidation.clear();

              let greaterThanZeroRule = {
                  wholeNumber: {
                      formula1: 0,
                      operator: Excel.DataValidationOperator.greaterThan
                  }
              };
              rankingRange.dataValidation.rule = greaterThanZeroRule;

              rankingRange.dataValidation.prompt = {
                  message: "Please enter a positive number.",
                  showPrompt: true,
                  title: "Positive numbers only."
              };

              rankingRange.dataValidation.errorAlert = {
                  message: "Sorry, only positive numbers are allowed",
                  showAlert: true,
                  style: "Stop",
                  title: "Negative Number Entered"
              };

              await context.sync();
          }
          ```
references:
  - uid: 'excel!Excel.CustomDataValidation:interface'
    name: CustomDataValidation
    fullName: Excel.CustomDataValidation
  - uid: 'excel!Excel.DateTimeDataValidation:interface'
    name: DateTimeDataValidation
    fullName: Excel.DateTimeDataValidation
  - uid: 'excel!Excel.BasicDataValidation:interface'
    name: BasicDataValidation
    fullName: Excel.BasicDataValidation
  - uid: 'excel!Excel.ListDataValidation:interface'
    name: ListDataValidation
    fullName: Excel.ListDataValidation