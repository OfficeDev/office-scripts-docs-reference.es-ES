### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.PivotTableCollection:interface'
    summary: Representa una colección de todas las tablas dinámicas que forman parte del libro o de la hoja de cálculo.
    name: Excel.PivotTableCollection
    fullName: Excel.PivotTableCollection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.PivotTableCollection#add:member(1)'
      - 'excel!Excel.PivotTableCollection#getCount:member(1)'
      - 'excel!Excel.PivotTableCollection#getItem:member(1)'
      - 'excel!Excel.PivotTableCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.PivotTableCollection#load:member(1)'
      - 'excel!Excel.PivotTableCollection#refreshAll:member(1)'
  - uid: 'excel!Excel.PivotTableCollection#add:member(1)'
    summary: Agrega una tabla dinámica basada en los datos de origen especificados e insértela en la celda superior izquierda del rango de destino.
    name: 'add(name, source, destination)'
    fullName: 'add(name, source, destination)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        add(
                    name: string,
                    source: Range | string | Table,
                    destination: Range | string
                ): PivotTable;
      return:
        type:
          - 'excel!Excel.PivotTable:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let rangeToAnalyze = context.workbook.worksheets.getItem("Data").getRange("A1:E21");
              let rangeToPlacePivot = context.workbook.worksheets.getItem("Pivot").getRange("A2");
              context.workbook.worksheets.getItem("Pivot").pivotTables.add("Farm Sales", rangeToAnalyze, rangeToPlacePivot);

              await context.sync();
          }
          ```
      parameters:
        - id: name
          description: Nombre de la nueva tabla dinámica.
          type:
            - string
        - id: source
          description: 'Los datos de origen de la nueva tabla dinámica, pueden ser un intervalo (o una dirección de cadena que incluya el nombre de la hoja de cálculo) o una tabla.'
          type:
            - 'excel!Excel.PivotTableCollection#add~0:complex'
        - id: destination
          description: Celda de la esquina superior izquierda del rango de destino del informe de tabla dinámica (el rango de la hoja de cálculo en el que se colocará el informe de tabla dinámica resultante).
          type:
            - 'excel!Excel.PivotTableCollection#add~1:complex'
  - uid: 'excel!Excel.PivotTableCollection#getCount:member(1)'
    summary: Obtiene el número de tablas dinámicas de una colección.
    name: getCount()
    fullName: getCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'excel!Excel.PivotTableCollection#getItem:member(1)'
    summary: Obtiene una tabla dinámica por nombre.
    name: getItem(name)
    fullName: getItem(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItem(name: string): PivotTable;'
      return:
        type:
          - 'excel!Excel.PivotTable:interface'
        description: ''
      parameters:
        - id: name
          description: Nombre de la tabla dinámica que se va a recuperar.
          type:
            - string
  - uid: 'excel!Excel.PivotTableCollection#getItemOrNullObject:member(1)'
    summary: 'Obtiene una tabla dinámica por nombre. Si no existe la tabla dinámica, devolverá un objeto NULL.'
    name: getItemOrNullObject(name)
    fullName: getItemOrNullObject(name)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(name: string): PivotTable;'
      return:
        type:
          - 'excel!Excel.PivotTable:interface'
        description: ''
      parameters:
        - id: name
          description: Nombre de la tabla dinámica que se va a recuperar.
          type:
            - string
  - uid: 'excel!Excel.PivotTableCollection#load:member(1)'
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.PivotTableCollection#refreshAll:member(1)'
    summary: Actualiza todas las tablas dinámicas de la colección.
    name: refreshAll()
    fullName: refreshAll()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'refreshAll(): void;'
      return:
        type:
          - void
        description: ''
references:
  - uid: 'excel!Excel.PivotTable:interface'
    name: PivotTable
    fullName: Excel.PivotTable
  - uid: 'excel!Excel.PivotTableCollection#add~0:complex'
    name: Range | string | Table
    fullName: Excel.Range | string | Excel.Table
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: ' | string | '
        fullName: ' | string | '
      - uid: 'excel!Excel.Table:interface'
        name: Table
        fullName: Excel.Table
  - uid: 'excel!Excel.PivotTableCollection#add~1:complex'
    name: Range | string
    fullName: Excel.Range | string
    spec.typeScript:
      - uid: 'excel!Excel.Range:interface'
        name: Range
        fullName: Excel.Range
      - name: |2-
           | string
                  
        fullName: |2-
           | string