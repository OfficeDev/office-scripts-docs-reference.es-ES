### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.CustomXmlPartCollection:interface'
    summary: Una colección de elementos XML personalizados.
    name: Excel.CustomXmlPartCollection
    fullName: Excel.CustomXmlPartCollection
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.CustomXmlPartCollection#add:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#getItemOrNullObject:member(1)'
      - 'excel!Excel.CustomXmlPartCollection#load:member(1)'
  - uid: 'excel!Excel.CustomXmlPartCollection#add:member(1)'
    summary: Se agrega un nuevo elemento XML personalizado al libro.
    name: add(xml)
    fullName: add(xml)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'add(xml: string): CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              // You must have the xmlns attribute to populate the 
              // CustomXml.namespaceUri property.
              let originalXml = "<Reviewers xmlns='http://schemas.contoso.com/review/1.0'><Reviewer>Juan</Reviewer><Reviewer>Hong</Reviewer><Reviewer>Sally</Reviewer></Reviewers>";
              let customXmlPart = context.workbook.customXmlParts.add(originalXml);
              customXmlPart.load("id");
              let xmlBlob = customXmlPart.getXml();

              await context.sync();

              let readableXml = addLineBreaksToXML(xmlBlob.value);
              $("#display-xml").text(readableXml);

              // Store the XML part's ID in a setting.
              let settings = context.workbook.settings;
              settings.add("ContosoReviewXmlPartId", customXmlPart.id);

              await context.sync();
          }
          ```
      parameters:
        - id: xml
          description: Contenido XML. Debe ser un fragmento XML válido.
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#getItemOrNullObject:member(1)'
    summary: 'Obtiene un elemento XML personalizado a partir de su identificador. Si el objeto CustomXmlPart no existe, la propiedad isNull del objeto devuelto será true.'
    name: getItemOrNullObject(id)
    fullName: getItemOrNullObject(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getItemOrNullObject(id: string): CustomXmlPart;'
      return:
        type:
          - 'excel!Excel.CustomXmlPart:interface'
        description: ''
      parameters:
        - id: id
          description: IDENTIFICADOR del objeto que se va a recuperar.
          type:
            - string
  - uid: 'excel!Excel.CustomXmlPartCollection#load:member(1)'
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
references:
  - uid: 'excel!Excel.CustomXmlPart:interface'
    name: CustomXmlPart
    fullName: Excel.CustomXmlPart