### YamlMime:TSType
name: Excel.Worksheet
uid: excel!Excel.Worksheet:interface
package: excel!
fullName: Excel.Worksheet
summary: Una hoja de cálculo de Excel es una cuadrícula de celdas. Puede contener datos, tablas, gráficos, etc. Para obtener más información sobre el modelo de objetos de la hoja de cálculo, vea [trabajar con hojas de cálculo mediante la API de JavaScript de Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)<!-- -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: autoFilter
  uid: excel!Excel.Worksheet#autoFilter:member
  package: excel!
  fullName: autoFilter
  summary: Indica el objeto AutoFilter de la hoja.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly autoFilter: AutoFilter;'
    return:
      type: <xref uid="excel!Excel.AutoFilter:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let farmData = sheet.getUsedRange();\n\n    // This filter will only show the rows with the top 25% of values in column 3.\n    sheet.autoFilter.apply(farmData, 3, { criterion1: \"25\", filterOn: Excel.FilterOn.topPercent });\n    await context.sync();\n}\n```"
- name: charts
  uid: excel!Excel.Worksheet#charts:member
  package: excel!
  fullName: charts
  summary: Devuelve una colección de gráficos que forman parte de la hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly charts: ChartCollection;'
    return:
      type: <xref uid="excel!Excel.ChartCollection:interface" />
- name: comments
  uid: excel!Excel.Worksheet#comments:member
  package: excel!
  fullName: comments
  summary: Devuelve una colección de todos los objetos Comments en la hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly comments: CommentCollection;'
    return:
      type: <xref uid="excel!Excel.CommentCollection:interface" />
- name: enableCalculation
  uid: excel!Excel.Worksheet#enableCalculation:member
  package: excel!
  fullName: enableCalculation
  summary: Determina si Excel debe volver a calcular la hoja de cálculo cuando sea necesario. True si Excel vuelve a calcular la hoja de cálculo cuando es necesario. False si Excel no actualiza la hoja.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'enableCalculation: boolean;'
    return:
      type: boolean
- name: freezePanes
  uid: excel!Excel.Worksheet#freezePanes:member
  package: excel!
  fullName: freezePanes
  summary: Obtiene un objeto que se puede usar para manipular paneles inmovilizados en la hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly freezePanes: WorksheetFreezePanes;'
    return:
      type: <xref uid="excel!Excel.WorksheetFreezePanes:interface" />
- name: horizontalPageBreaks
  uid: excel!Excel.Worksheet#horizontalPageBreaks:member
  package: excel!
  fullName: horizontalPageBreaks
  summary: Obtiene la colección de saltos de página horizontales de la hoja de cálculo. Esta colección solo contiene saltos de página manuales.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly horizontalPageBreaks: PageBreakCollection;'
    return:
      type: <xref uid="excel!Excel.PageBreakCollection:interface" />
- name: id
  uid: excel!Excel.Worksheet#id:member
  package: excel!
  fullName: id
  summary: Devuelve un valor que identifica de forma única la hoja de cálculo de un libro determinado. El valor del identificador permanece igual, incluso cuando se cambia el nombre de la hoja de cálculo o cuando esta se mueve.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly id: string;'
    return:
      type: string
- name: name
  uid: excel!Excel.Worksheet#name:member
  package: excel!
  fullName: name
  summary: Nombre para mostrar de la hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'name: string;'
    return:
      type: string
- name: names
  uid: excel!Excel.Worksheet#names:member
  package: excel!
  fullName: names
  summary: Colección de nombres en el ámbito de la hoja de cálculo actual.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly names: NamedItemCollection;'
    return:
      type: <xref uid="excel!Excel.NamedItemCollection:interface" />
- name: pageLayout
  uid: excel!Excel.Worksheet#pageLayout:member
  package: excel!
  fullName: pageLayout
  summary: Obtiene el objeto PageLayout de la hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pageLayout: PageLayout;'
    return:
      type: <xref uid="excel!Excel.PageLayout:interface" />
- name: pivotTables
  uid: excel!Excel.Worksheet#pivotTables:member
  package: excel!
  fullName: pivotTables
  summary: Colección de tablas dinámicas que forman parte de la hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pivotTables: PivotTableCollection;'
    return:
      type: <xref uid="excel!Excel.PivotTableCollection:interface" />
- name: position
  uid: excel!Excel.Worksheet#position:member
  package: excel!
  fullName: position
  summary: Posición de base cero de la hoja de cálculo dentro del libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'position: number;'
    return:
      type: number
- name: protection
  uid: excel!Excel.Worksheet#protection:member
  package: excel!
  fullName: protection
  summary: Devuelve el objeto de protección de hoja de una hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly protection: WorksheetProtection;'
    return:
      type: <xref uid="excel!Excel.WorksheetProtection:interface" />
- name: shapes
  uid: excel!Excel.Worksheet#shapes:member
  package: excel!
  fullName: shapes
  summary: Devuelve la colección de todos los objetos Shape en la hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly shapes: ShapeCollection;'
    return:
      type: <xref uid="excel!Excel.ShapeCollection:interface" />
- name: showGridlines
  uid: excel!Excel.Worksheet#showGridlines:member
  package: excel!
  fullName: showGridlines
  summary: Especifica si la cuadrícula es visible para el usuario.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showGridlines: boolean;'
    return:
      type: boolean
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    sheet.showGridlines = true;\n\n    await context.sync();\n}\n```"
- name: showHeadings
  uid: excel!Excel.Worksheet#showHeadings:member
  package: excel!
  fullName: showHeadings
  summary: Especifica si los títulos están visibles para el usuario.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showHeadings: boolean;'
    return:
      type: boolean
- name: slicers
  uid: excel!Excel.Worksheet#slicers:member
  package: excel!
  fullName: slicers
  summary: Devuelve una colección de segmentaciones de los participantes que forman parte de la hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly slicers: SlicerCollection;'
    return:
      type: <xref uid="excel!Excel.SlicerCollection:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Pivot\");\n    let slicer = sheet.slicers.add(\n        \"Farm Sales\", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */\n        \"Type\" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */\n    );\n    slicer.name = \"Fruit Slicer\";\n    await context.sync();\n}\n```"
- name: standardHeight
  uid: excel!Excel.Worksheet#standardHeight:member
  package: excel!
  fullName: standardHeight
  summary: Devuelve el ancho estándar (predeterminado) de todas las filas de la hoja de cálculo, en puntos.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly standardHeight: number;'
    return:
      type: number
- name: standardWidth
  uid: excel!Excel.Worksheet#standardWidth:member
  package: excel!
  fullName: standardWidth
  summary: Especifica el ancho estándar (predeterminado) de todas las columnas de la hoja de cálculo. Una unidad de ancho de columna equivale al ancho de un carácter con el estilo Normal. En las fuentes proporcionales se utiliza el ancho del carácter 0 (cero).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'standardWidth: number;'
    return:
      type: number
- name: tabColor
  uid: excel!Excel.Worksheet#tabColor:member
  package: excel!
  fullName: tabColor
  summary: Color de la pestaña de la hoja de cálculo. Al recuperar el color de la pestaña, si la hoja de cálculo es invisible, el valor será null. Si la hoja de cálculo está visible pero el color de la pestaña está establecido en automático, se devolverá una cadena vacía. De lo contrario, la propiedad se establecerá en un color, con el formato " \# 123456" cuando se establezca el color, use una cadena vacía para establecer un color "auto" o un color real en caso contrario.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'tabColor: string;'
    return:
      type: string
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let activeSheet = context.workbook.worksheets.getActiveWorksheet();\n    activeSheet.tabColor = \"#FF0000\";\n\n    await context.sync();\n}\n```"
- name: tables
  uid: excel!Excel.Worksheet#tables:member
  package: excel!
  fullName: tables
  summary: Colección de tablas que forman parte de la hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly tables: TableCollection;'
    return:
      type: <xref uid="excel!Excel.TableCollection:interface" />
- name: verticalPageBreaks
  uid: excel!Excel.Worksheet#verticalPageBreaks:member
  package: excel!
  fullName: verticalPageBreaks
  summary: Obtiene la colección de saltos de página verticales de la hoja de cálculo. Esta colección solo contiene saltos de página manuales.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly verticalPageBreaks: PageBreakCollection;'
    return:
      type: <xref uid="excel!Excel.PageBreakCollection:interface" />
- name: visibility
  uid: excel!Excel.Worksheet#visibility:member
  package: excel!
  fullName: visibility
  summary: Visibilidad de la hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'visibility: SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
    return:
      type: <xref uid="excel!Excel.SheetVisibility:enum" /> | "Visible" | "Hidden" | "VeryHidden"
methods:
- name: activate()
  uid: excel!Excel.Worksheet#activate:member(1)
  package: excel!
  fullName: activate()
  summary: Activa la hoja de cálculo en la interfaz de usuario de Excel.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'activate(): void;'
    return:
      type: void
      description: ''
- name: calculate(markAllDirty)
  uid: excel!Excel.Worksheet#calculate:member(1)
  package: excel!
  fullName: calculate(markAllDirty)
  summary: Calcula todas las celdas de una hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'calculate(markAllDirty: boolean): void;'
    parameters:
    - id: markAllDirty
      description: True, para marcar todos como modificados.
      type: boolean
    return:
      type: void
      description: ''
- name: copy(positionType, relativeTo)
  uid: excel!Excel.Worksheet#copy:member(1)
  package: excel!
  fullName: copy(positionType, relativeTo)
  summary: Copia una hoja de cálculo y la coloca en la posición especificada.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      copy(
                  positionType?:
                      | WorksheetPositionType
                      | "None"
                      | "Before"
                      | "After"
                      | "Beginning"
                      | "End",
                  relativeTo?: Worksheet
              ): Worksheet;
    parameters:
    - id: positionType
      description: Ubicación del libro en la que se va a ubicar la hoja de cálculo recién creada. El valor predeterminado es "none", que inserta la hoja de cálculo al principio de la hoja de cálculo.
      type: >-
        | <xref uid="excel!Excel.WorksheetPositionType:enum" />
                        | "None"
                        | "Before"
                        | "After"
                        | "Beginning"
                        | "End"
    - id: relativeTo
      description: La hoja de cálculo existente que determina la posición de la hoja de cálculo recién creada. Esto solo es necesario si `positionType` es "Before" o "after".
      type: <xref uid="excel!Excel.Worksheet:interface" />
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let myWorkbook = context.workbook;\n    let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();\n    let copiedSheet = sampleSheet.copy(\"End\")\n\n    sampleSheet.load(\"name\");\n    copiedSheet.load(\"name\");\n\n    await context.sync();\n\n    console.log(\"'\" + sampleSheet.name + \"' was copied to '\" + copiedSheet.name + \"'\")\n}\n```"
- name: delete()
  uid: excel!Excel.Worksheet#delete:member(1)
  package: excel!
  fullName: delete()
  summary: Elimina la hoja de cálculo del libro. Tenga en cuenta que si la visibilidad de la hoja de cálculo se establece en "VeryHidden", se producirá un error en la operación de eliminación con una `InvalidOperation` excepción. Primero debe cambiar su visibilidad a oculto o visible antes de eliminarlo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: ''
- name: findAll(text, criteria)
  uid: excel!Excel.Worksheet#findAll:member(1)
  package: excel!
  fullName: findAll(text, criteria)
  summary: Busca todas las repeticiones de la cadena especificada, según los criterios especificados y las devuelve como un objeto RangeAreas, que incluye uno o más intervalos rectangulares.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'findAll(text: string, criteria: WorksheetSearchCriteria): RangeAreas;'
    parameters:
    - id: text
      description: Cadena que se va a buscar.
      type: string
    - id: criteria
      description: Criterios de búsqueda adicionales, incluidos si la búsqueda debe coincidir con toda la celda o con distinción de mayúsculas y minúsculas.
      type: <xref uid="excel!Excel.WorksheetSearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: ''
- name: findAllOrNullObject(text, criteria)
  uid: excel!Excel.Worksheet#findAllOrNullObject:member(1)
  package: excel!
  fullName: findAllOrNullObject(text, criteria)
  summary: Busca todas las repeticiones de la cadena especificada, según los criterios especificados y las devuelve como un objeto RangeAreas, que incluye uno o más intervalos rectangulares.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      findAllOrNullObject(
                  text: string,
                  criteria: WorksheetSearchCriteria
              ): RangeAreas;
    parameters:
    - id: text
      description: Cadena que se va a buscar.
      type: string
    - id: criteria
      description: Criterios de búsqueda adicionales, incluidos si la búsqueda debe coincidir con toda la celda o con distinción de mayúsculas y minúsculas.
      type: <xref uid="excel!Excel.WorksheetSearchCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let foundRanges = sheet.findAllOrNullObject(\"Complete\", {\n        completeMatch: true,\n        matchCase: false\n    });\n\n    await context.sync();\n\n    if (foundRanges.isNullObject) {\n        console.log(\"No complete projects\");\n    } else {\n        foundRanges.format.fill.color = \"green\"\n    }\n}\n```"
- name: getCell(row, column)
  uid: excel!Excel.Worksheet#getCell:member(1)
  package: excel!
  fullName: getCell(row, column)
  summary: Obtiene el objeto de intervalo que contiene la celda en función de los números de fila y columna. La celda puede estar fuera de los límites de su rango primario, siempre y cuando se mantenga dentro de la cuadrícula de la hoja de cálculo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCell(row: number, column: number): Range;'
    parameters:
    - id: row
      description: Número de fila de la celda que se va a recuperar. Indizado con cero.
      type: number
    - id: column
      description: Número de columna de la celda que se va a recuperar. Indexado con cero.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getNext(visibleOnly)
  uid: excel!Excel.Worksheet#getNext:member(1)
  package: excel!
  fullName: getNext(visibleOnly)
  summary: Obtiene la hoja de cálculo que sigue a este. Si no hay ninguna hoja de cálculo después de esta, este método producirá un error.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNext(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getNextOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getNextOrNullObject:member(1)
  package: excel!
  fullName: getNextOrNullObject(visibleOnly)
  summary: Obtiene la hoja de cálculo que sigue a este. Si no hay ninguna hoja de cálculo después de ésta, este método devolverá un objeto null.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getNextOrNullObject(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getPrevious(visibleOnly)
  uid: excel!Excel.Worksheet#getPrevious:member(1)
  package: excel!
  fullName: getPrevious(visibleOnly)
  summary: Obtiene la hoja de cálculo que precede a esta. Si no hay ninguna hoja de cálculo anterior, este método producirá un error.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPrevious(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getPreviousOrNullObject(visibleOnly)
  uid: excel!Excel.Worksheet#getPreviousOrNullObject:member(1)
  package: excel!
  fullName: getPreviousOrNullObject(visibleOnly)
  summary: Obtiene la hoja de cálculo que precede a esta. Si no hay ninguna hoja de cálculo anterior, este método devolverá un objetos null.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreviousOrNullObject(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getRange(address)
  uid: excel!Excel.Worksheet#getRange:member(1)
  package: excel!
  fullName: getRange(address)
  summary: Obtiene el objeto de intervalo, que representa un único bloque rectangular de celdas, especificado por la dirección o el nombre.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(address?: string): Range;'
    parameters:
    - id: address
      description: 'Opcional. La cadena que representa la dirección o el nombre del intervalo. Por ejemplo, "a1: B2". Si no se especifica, se devuelve todo el intervalo de la hoja de cálculo.'
      type: string
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  uid: excel!Excel.Worksheet#getRangeByIndexes:member(1)
  package: excel!
  fullName: getRangeByIndexes(startRow, startColumn, rowCount, columnCount)
  summary: Obtiene el objeto de intervalo comenzando en un índice de columna y fila determinado, y que abarca un determinado número de filas y columnas.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      getRangeByIndexes(
                  startRow: number,
                  startColumn: number,
                  rowCount: number,
                  columnCount: number
              ): Range;
    parameters:
    - id: startRow
      description: Fila de inicio (indizado con ceros).
      type: number
    - id: startColumn
      description: Columna de inicio (indizado con ceros).
      type: number
    - id: rowCount
      description: Número de filas que se van a incluir en el rango.
      type: number
    - id: columnCount
      description: Número de columnas que se van a incluir en el rango.
      type: number
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getRanges(address)
  uid: excel!Excel.Worksheet#getRanges:member(1)
  package: excel!
  fullName: getRanges(address)
  summary: Obtiene el objeto RangeAreas, que representa uno o varios bloques de intervalos rectangulares especificadas por la dirección o el nombre.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRanges(address?: string): RangeAreas;'
    parameters:
    - id: address
      description: 'Opcional. Una cadena que contiene las direcciones separadas por comas o los nombres de los intervalos individuales. Por ejemplo, "a1: B2, A5: B5". Si no se especifica, se devuelve un objeto RangeArea para toda la hoja de cálculo.'
      type: string
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n    let specifiedRanges = sheet.getRanges(\"D3:D5, G3:G5\");\n    specifiedRanges.format.fill.color = \"pink\";\n\n    await context.sync();\n})\n```"
- name: getUsedRange(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRange:member(1)
  package: excel!
  fullName: getUsedRange(valuesOnly)
  summary: El rango usado es el rango más pequeño que abarque todas las celdas que tengan asignado un valor o un formato. Si toda la hoja de cálculo está en blanco, esta función devolverá la celda superior izquierda (es decir, *no* generará un error).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRange(valuesOnly?: boolean): Range;'
    parameters:
    - id: valuesOnly
      description: Opcional. Si es true, solo tiene en cuenta las celdas con valores como celdas usadas (ignora el formato).
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getUsedRangeOrNullObject(valuesOnly)
  uid: excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)
  package: excel!
  fullName: getUsedRangeOrNullObject(valuesOnly)
  summary: El rango usado es el rango más pequeño que abarque todas las celdas que tengan asignado un valor o un formato. Si toda la hoja está en blanco, esta función devolverá un objeto NULL.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Range;'
    parameters:
    - id: valuesOnly
      description: Opcional. Solo tiene en cuenta las celdas con valores como celdas usadas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.Worksheet#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
      type: string | string[]
    return:
      type: void
      description: ''
- name: replaceAll(text, replacement, criteria)
  uid: excel!Excel.Worksheet#replaceAll:member(1)
  package: excel!
  fullName: replaceAll(text, replacement, criteria)
  summary: Busca y reemplaza la cadena especificada, según los criterios especificados dentro de la hoja de cálculo actual.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      replaceAll(
                  text: string,
                  replacement: string,
                  criteria: ReplaceCriteria
              ): ClientResult<number>;
    parameters:
    - id: text
      description: Cadena que se va a buscar.
      type: string
    - id: replacement
      description: Cadena con la que se va a reemplazar el original.
      type: string
    - id: criteria
      description: Criterios de reemplazo adicionales.
      type: <xref uid="excel!Excel.ReplaceCriteria:interface" />
    return:
      type: <xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;
      description: ''
- name: showOutlineLevels(rowLevels, columnLevels)
  uid: excel!Excel.Worksheet#showOutlineLevels:member(1)
  package: excel!
  fullName: showOutlineLevels(rowLevels, columnLevels)
  summary: Muestra los grupos de filas o columnas por sus niveles de esquema. Grupo de esquemas y resumir una lista de datos en la hoja de cálculo. Los `rowLevels` `columnLevels` parámetros y especifican el número de niveles del esquema que se mostrarán. El intervalo de argumentos aceptable está comprendido entre 0 y 8. Un valor de 0 no cambia la presentación actual. Un valor mayor que el número actual de niveles muestra todos los niveles.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
    parameters:
    - id: rowLevels
      description: Número de niveles de fila de un esquema que se va a mostrar.
      type: number
    - id: columnLevels
      description: El número de niveles de columna de un esquema que se va a mostrar.
      type: number
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nExcel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // This collapses the entire outline.\n    sheet.showOutlineLevels(1, 1);\n    await context.sync();\n}\n```\n```typescript\nExcel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    // This shows the top 3 outline levels; collapsing any additional sublevels.\n    sheet.showOutlineLevels(3, 3);\n    await context.sync();\n}\n```"
metadata:
  ms.openlocfilehash: 3827291e11b2d99290067ce2143a928083276d38
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49412646"
