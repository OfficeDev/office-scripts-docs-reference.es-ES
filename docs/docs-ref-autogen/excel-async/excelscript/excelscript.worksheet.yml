### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.Worksheet:interface'
    summary: 'Una hoja de cálculo de Excel es una cuadrícula de celdas. Puede contener datos, tablas, gráficos, etc. Para obtener más información sobre el modelo de objetos de la hoja de cálculo, vea [trabajar con hojas de cálculo mediante la API de JavaScript de Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-worksheets)<!-- -->.'
    name: Excel.Worksheet
    fullName: Excel.Worksheet
    langs:
      - typeScript
    type: interface
    package: excel!
    children:
      - 'excel!Excel.Worksheet#activate:member(1)'
      - 'excel!Excel.Worksheet#autoFilter:member'
      - 'excel!Excel.Worksheet#calculate:member(1)'
      - 'excel!Excel.Worksheet#charts:member'
      - 'excel!Excel.Worksheet#comments:member'
      - 'excel!Excel.Worksheet#copy:member(1)'
      - 'excel!Excel.Worksheet#delete:member(1)'
      - 'excel!Excel.Worksheet#enableCalculation:member'
      - 'excel!Excel.Worksheet#findAll:member(1)'
      - 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#freezePanes:member'
      - 'excel!Excel.Worksheet#getCell:member(1)'
      - 'excel!Excel.Worksheet#getNext:member(1)'
      - 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getPrevious:member(1)'
      - 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#getRange:member(1)'
      - 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
      - 'excel!Excel.Worksheet#getRanges:member(1)'
      - 'excel!Excel.Worksheet#getUsedRange:member(1)'
      - 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
      - 'excel!Excel.Worksheet#horizontalPageBreaks:member'
      - 'excel!Excel.Worksheet#id:member'
      - 'excel!Excel.Worksheet#load:member(1)'
      - 'excel!Excel.Worksheet#name:member'
      - 'excel!Excel.Worksheet#names:member'
      - 'excel!Excel.Worksheet#pageLayout:member'
      - 'excel!Excel.Worksheet#pivotTables:member'
      - 'excel!Excel.Worksheet#position:member'
      - 'excel!Excel.Worksheet#protection:member'
      - 'excel!Excel.Worksheet#replaceAll:member(1)'
      - 'excel!Excel.Worksheet#shapes:member'
      - 'excel!Excel.Worksheet#showGridlines:member'
      - 'excel!Excel.Worksheet#showHeadings:member'
      - 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
      - 'excel!Excel.Worksheet#slicers:member'
      - 'excel!Excel.Worksheet#standardHeight:member'
      - 'excel!Excel.Worksheet#standardWidth:member'
      - 'excel!Excel.Worksheet#tabColor:member'
      - 'excel!Excel.Worksheet#tables:member'
      - 'excel!Excel.Worksheet#verticalPageBreaks:member'
      - 'excel!Excel.Worksheet#visibility:member'
  - uid: 'excel!Excel.Worksheet#activate:member(1)'
    summary: Activa la hoja de cálculo en la interfaz de usuario de Excel.
    name: activate()
    fullName: activate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'activate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Worksheet#autoFilter:member'
    summary: Indica el objeto AutoFilter de la hoja.
    name: autoFilter
    fullName: autoFilter
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly autoFilter: AutoFilter;'
      return:
        type:
          - 'excel!Excel.AutoFilter:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let farmData = sheet.getUsedRange();

              // This filter will only show the rows with the top 25% of values in column 3.
              sheet.autoFilter.apply(farmData, 3, { criterion1: "25", filterOn: Excel.FilterOn.topPercent });
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Worksheet#calculate:member(1)'
    summary: Calcula todas las celdas de una hoja de cálculo.
    name: calculate(markAllDirty)
    fullName: calculate(markAllDirty)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(markAllDirty: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: markAllDirty
          description: 'True, para marcar todos como modificados.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#charts:member'
    summary: Devuelve una colección de gráficos que forman parte de la hoja de cálculo.
    name: charts
    fullName: charts
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly charts: ChartCollection;'
      return:
        type:
          - 'excel!Excel.ChartCollection:interface'
  - uid: 'excel!Excel.Worksheet#comments:member'
    summary: Devuelve una colección de todos los objetos Comments en la hoja de cálculo.
    name: comments
    fullName: comments
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly comments: CommentCollection;'
      return:
        type:
          - 'excel!Excel.CommentCollection:interface'
  - uid: 'excel!Excel.Worksheet#copy:member(1)'
    summary: Copia una hoja de cálculo y la coloca en la posición especificada.
    name: 'copy(positionType, relativeTo)'
    fullName: 'copy(positionType, relativeTo)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copy(
                    positionType?:
                        | WorksheetPositionType
                        | "None"
                        | "Before"
                        | "After"
                        | "Beginning"
                        | "End",
                    relativeTo?: Worksheet
                ): Worksheet;
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let myWorkbook = context.workbook;
              let sampleSheet = myWorkbook.worksheets.getActiveWorksheet();
              let copiedSheet = sampleSheet.copy("End")

              sampleSheet.load("name");
              copiedSheet.load("name");

              await context.sync();

              console.log("'" + sampleSheet.name + "' was copied to '" + copiedSheet.name + "'")
          }
          ```
      parameters:
        - id: positionType
          description: 'Ubicación del libro en la que se va a ubicar la hoja de cálculo recién creada. El valor predeterminado es "none", que inserta la hoja de cálculo al principio de la hoja de cálculo.'
          type:
            - 'excel!Excel.Worksheet#copy~0:complex'
        - id: relativeTo
          description: La hoja de cálculo existente que determina la posición de la hoja de cálculo recién creada. Esto solo es necesario si `positionType` es "Before" o "after".
          type:
            - 'excel!Excel.Worksheet:interface'
  - uid: 'excel!Excel.Worksheet#delete:member(1)'
    summary: 'Elimina la hoja de cálculo del libro. Tenga en cuenta que si la visibilidad de la hoja de cálculo se establece en "VeryHidden", se producirá un error en la operación de eliminación con una `InvalidOperation` excepción. Primero debe cambiar su visibilidad a oculto o visible antes de eliminarlo.'
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.Worksheet#enableCalculation:member'
    summary: Determina si Excel debe volver a calcular la hoja de cálculo cuando sea necesario. True si Excel vuelve a calcular la hoja de cálculo cuando es necesario. False si Excel no actualiza la hoja.
    name: enableCalculation
    fullName: enableCalculation
    langs:
      - typeScript
    type: property
    syntax:
      content: 'enableCalculation: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#findAll:member(1)'
    summary: 'Busca todas las repeticiones de la cadena especificada, según los criterios especificados y las devuelve como un objeto RangeAreas, que incluye uno o más intervalos rectangulares.'
    name: 'findAll(text, criteria)'
    fullName: 'findAll(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'findAll(text: string, criteria: WorksheetSearchCriteria): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: ''
      parameters:
        - id: text
          description: Cadena que se va a buscar.
          type:
            - string
        - id: criteria
          description: 'Criterios de búsqueda adicionales, incluidos si la búsqueda debe coincidir con toda la celda o con distinción de mayúsculas y minúsculas.'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#findAllOrNullObject:member(1)'
    summary: 'Busca todas las repeticiones de la cadena especificada, según los criterios especificados y las devuelve como un objeto RangeAreas, que incluye uno o más intervalos rectangulares.'
    name: 'findAllOrNullObject(text, criteria)'
    fullName: 'findAllOrNullObject(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        findAllOrNullObject(
                    text: string,
                    criteria: WorksheetSearchCriteria
                ): RangeAreas;
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let foundRanges = sheet.findAllOrNullObject("Complete", {
                  completeMatch: true,
                  matchCase: false
              });

              await context.sync();

              if (foundRanges.isNullObject) {
                  console.log("No complete projects");
              } else {
                  foundRanges.format.fill.color = "green"
              }
          }
          ```
      parameters:
        - id: text
          description: Cadena que se va a buscar.
          type:
            - string
        - id: criteria
          description: 'Criterios de búsqueda adicionales, incluidos si la búsqueda debe coincidir con toda la celda o con distinción de mayúsculas y minúsculas.'
          type:
            - 'excel!Excel.WorksheetSearchCriteria:interface'
  - uid: 'excel!Excel.Worksheet#freezePanes:member'
    summary: Obtiene un objeto que se puede usar para manipular paneles inmovilizados en la hoja de cálculo.
    name: freezePanes
    fullName: freezePanes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly freezePanes: WorksheetFreezePanes;'
      return:
        type:
          - 'excel!Excel.WorksheetFreezePanes:interface'
  - uid: 'excel!Excel.Worksheet#getCell:member(1)'
    summary: 'Obtiene el objeto de intervalo que contiene la celda en función de los números de fila y columna. La celda puede estar fuera de los límites de su rango primario, siempre y cuando se mantenga dentro de la cuadrícula de la hoja de cálculo.'
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: row
          description: Número de fila de la celda que se va a recuperar. Indizado con cero.
          type:
            - number
        - id: column
          description: Número de columna de la celda que se va a recuperar. Indexado con cero.
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getNext:member(1)'
    summary: 'Obtiene la hoja de cálculo que sigue a este. Si no hay ninguna hoja de cálculo después de esta, este método producirá un error.'
    name: getNext(visibleOnly)
    fullName: getNext(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNext(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getNextOrNullObject:member(1)'
    summary: 'Obtiene la hoja de cálculo que sigue a este. Si no hay ninguna hoja de cálculo después de ésta, este método devolverá un objeto null.'
    name: getNextOrNullObject(visibleOnly)
    fullName: getNextOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNextOrNullObject(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPrevious:member(1)'
    summary: 'Obtiene la hoja de cálculo que precede a esta. Si no hay ninguna hoja de cálculo anterior, este método producirá un error.'
    name: getPrevious(visibleOnly)
    fullName: getPrevious(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPrevious(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getPreviousOrNullObject:member(1)'
    summary: 'Obtiene la hoja de cálculo que precede a esta. Si no hay ninguna hoja de cálculo anterior, este método devolverá un objetos null.'
    name: getPreviousOrNullObject(visibleOnly)
    fullName: getPreviousOrNullObject(visibleOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPreviousOrNullObject(visibleOnly?: boolean): Worksheet;'
      return:
        type:
          - 'excel!Excel.Worksheet:interface'
        description: ''
      parameters:
        - id: visibleOnly
          description: 'Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getRange:member(1)'
    summary: 'Obtiene el objeto de intervalo, que representa un único bloque rectangular de celdas, especificado por la dirección o el nombre.'
    name: getRange(address)
    fullName: getRange(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(address?: string): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: address
          description: 'Opcional. La cadena que representa la dirección o el nombre del intervalo. Por ejemplo, "a1: B2". Si no se especifica, se devuelve todo el intervalo de la hoja de cálculo.'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getRangeByIndexes:member(1)'
    summary: 'Obtiene el objeto de intervalo comenzando en un índice de columna y fila determinado, y que abarca un determinado número de filas y columnas.'
    name: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    fullName: 'getRangeByIndexes(startRow, startColumn, rowCount, columnCount)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getRangeByIndexes(
                    startRow: number,
                    startColumn: number,
                    rowCount: number,
                    columnCount: number
                ): Range;
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: startRow
          description: Fila de inicio (indizado con ceros).
          type:
            - number
        - id: startColumn
          description: Columna de inicio (indizado con ceros).
          type:
            - number
        - id: rowCount
          description: Número de filas que se van a incluir en el rango.
          type:
            - number
        - id: columnCount
          description: Número de columnas que se van a incluir en el rango.
          type:
            - number
  - uid: 'excel!Excel.Worksheet#getRanges:member(1)'
    summary: 'Obtiene el objeto RangeAreas, que representa uno o varios bloques de intervalos rectangulares especificadas por la dirección o el nombre.'
    name: getRanges(address)
    fullName: getRanges(address)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(address?: string): RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {

              let sheet = context.workbook.worksheets.getActiveWorksheet();
              let specifiedRanges = sheet.getRanges("D3:D5, G3:G5");
              specifiedRanges.format.fill.color = "pink";

              await context.sync();
          })
          ```
      parameters:
        - id: address
          description: 'Opcional. Una cadena que contiene las direcciones separadas por comas o los nombres de los intervalos individuales. Por ejemplo, "a1: B2, A5: B5". Si no se especifica, se devuelve un objeto RangeArea para toda la hoja de cálculo.'
          type:
            - string
  - uid: 'excel!Excel.Worksheet#getUsedRange:member(1)'
    summary: 'El rango usado es el rango más pequeño que abarque todas las celdas que tengan asignado un valor o un formato. Si toda la hoja de cálculo está en blanco, esta función devolverá la celda superior izquierda (es decir, *no* generará un error).'
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: 'Opcional. Si es true, solo tiene en cuenta las celdas con valores como celdas usadas (ignora el formato).'
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#getUsedRangeOrNullObject:member(1)'
    summary: 'El rango usado es el rango más pequeño que abarque todas las celdas que tengan asignado un valor o un formato. Si toda la hoja está en blanco, esta función devolverá un objeto NULL.'
    name: getUsedRangeOrNullObject(valuesOnly)
    fullName: getUsedRangeOrNullObject(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRangeOrNullObject(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'excel!Excel.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: Opcional. Solo tiene en cuenta las celdas con valores como celdas usadas.
          type:
            - boolean
  - uid: 'excel!Excel.Worksheet#horizontalPageBreaks:member'
    summary: Obtiene la colección de saltos de página horizontales de la hoja de cálculo. Esta colección solo contiene saltos de página manuales.
    name: horizontalPageBreaks
    fullName: horizontalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly horizontalPageBreaks: PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:interface'
  - uid: 'excel!Excel.Worksheet#id:member'
    summary: 'Devuelve un valor que identifica de forma única la hoja de cálculo de un libro determinado. El valor del identificador permanece igual, incluso cuando se cambia el nombre de la hoja de cálculo o cuando esta se mueve.'
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#load:member(1)'
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.Worksheet#name:member'
    summary: Nombre para mostrar de la hoja de cálculo.
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'name: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.Worksheet#names:member'
    summary: Colección de nombres en el ámbito de la hoja de cálculo actual.
    name: names
    fullName: names
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly names: NamedItemCollection;'
      return:
        type:
          - 'excel!Excel.NamedItemCollection:interface'
  - uid: 'excel!Excel.Worksheet#pageLayout:member'
    summary: Obtiene el objeto PageLayout de la hoja de cálculo.
    name: pageLayout
    fullName: pageLayout
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pageLayout: PageLayout;'
      return:
        type:
          - 'excel!Excel.PageLayout:interface'
  - uid: 'excel!Excel.Worksheet#pivotTables:member'
    summary: Colección de tablas dinámicas que forman parte de la hoja de cálculo.
    name: pivotTables
    fullName: pivotTables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly pivotTables: PivotTableCollection;'
      return:
        type:
          - 'excel!Excel.PivotTableCollection:interface'
  - uid: 'excel!Excel.Worksheet#position:member'
    summary: Posición de base cero de la hoja de cálculo dentro del libro.
    name: position
    fullName: position
    langs:
      - typeScript
    type: property
    syntax:
      content: 'position: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#protection:member'
    summary: Devuelve el objeto de protección de hoja de una hoja de cálculo.
    name: protection
    fullName: protection
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly protection: WorksheetProtection;'
      return:
        type:
          - 'excel!Excel.WorksheetProtection:interface'
  - uid: 'excel!Excel.Worksheet#replaceAll:member(1)'
    summary: 'Busca y reemplaza la cadena especificada, según los criterios especificados dentro de la hoja de cálculo actual.'
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): ClientResult<number>;
      return:
        type:
          - 'excel!Excel.Worksheet#replaceAll~0:complex'
        description: ''
      parameters:
        - id: text
          description: Cadena que se va a buscar.
          type:
            - string
        - id: replacement
          description: Cadena con la que se va a reemplazar el original.
          type:
            - string
        - id: criteria
          description: Criterios de reemplazo adicionales.
          type:
            - 'excel!Excel.ReplaceCriteria:interface'
  - uid: 'excel!Excel.Worksheet#shapes:member'
    summary: Devuelve la colección de todos los objetos Shape en la hoja de cálculo.
    name: shapes
    fullName: shapes
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly shapes: ShapeCollection;'
      return:
        type:
          - 'excel!Excel.ShapeCollection:interface'
  - uid: 'excel!Excel.Worksheet#showGridlines:member'
    summary: Especifica si la cuadrícula es visible para el usuario.
    name: showGridlines
    fullName: showGridlines
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showGridlines: boolean;'
      return:
        type:
          - boolean
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getActiveWorksheet();
              sheet.showGridlines = true;

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Worksheet#showHeadings:member'
    summary: Especifica si los títulos están visibles para el usuario.
    name: showHeadings
    fullName: showHeadings
    langs:
      - typeScript
    type: property
    syntax:
      content: 'showHeadings: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.Worksheet#showOutlineLevels:member(1)'
    summary: Muestra los grupos de filas o columnas por sus niveles de esquema. Grupo de esquemas y resumir una lista de datos en la hoja de cálculo. Los `rowLevels` `columnLevels` parámetros y especifican el número de niveles del esquema que se mostrarán. El intervalo de argumentos aceptable está comprendido entre 0 y 8. Un valor de 0 no cambia la presentación actual. Un valor mayor que el número actual de niveles muestra todos los niveles.
    name: 'showOutlineLevels(rowLevels, columnLevels)'
    fullName: 'showOutlineLevels(rowLevels, columnLevels)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showOutlineLevels(rowLevels: number, columnLevels: number): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();

              // This collapses the entire outline.
              sheet.showOutlineLevels(1, 1);
              await context.sync();
          }
          ```
          ```typescript
          Excel.run(async (context) => {
              let sheet = context.workbook.worksheets.getActiveWorksheet();

              // This shows the top 3 outline levels; collapsing any additional sublevels.
              sheet.showOutlineLevels(3, 3);
              await context.sync();
          }
          ```
      parameters:
        - id: rowLevels
          description: Número de niveles de fila de un esquema que se va a mostrar.
          type:
            - number
        - id: columnLevels
          description: El número de niveles de columna de un esquema que se va a mostrar.
          type:
            - number
  - uid: 'excel!Excel.Worksheet#slicers:member'
    summary: Devuelve una colección de segmentaciones de los participantes que forman parte de la hoja de cálculo.
    name: slicers
    fullName: slicers
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly slicers: SlicerCollection;'
      return:
        type:
          - 'excel!Excel.SlicerCollection:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Pivot");
              let slicer = sheet.slicers.add(
                  "Farm Sales", /* The slicer data source. For PivotTables, this can be the PivotTable object reference or name. */
                  "Type" /* The field in the data source to filter by. For PivotTables, this can be a PivotField object reference or ID. */
              );
              slicer.name = "Fruit Slicer";
              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Worksheet#standardHeight:member'
    summary: 'Devuelve el ancho estándar (predeterminado) de todas las filas de la hoja de cálculo, en puntos.'
    name: standardHeight
    fullName: standardHeight
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly standardHeight: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#standardWidth:member'
    summary: Especifica el ancho estándar (predeterminado) de todas las columnas de la hoja de cálculo. Una unidad de ancho de columna equivale al ancho de un carácter con el estilo Normal. En las fuentes proporcionales se utiliza el ancho del carácter 0 (cero).
    name: standardWidth
    fullName: standardWidth
    langs:
      - typeScript
    type: property
    syntax:
      content: 'standardWidth: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.Worksheet#tabColor:member'
    summary: 'Color de la pestaña de la hoja de cálculo. Al recuperar el color de la pestaña, si la hoja de cálculo es invisible, el valor será null. Si la hoja de cálculo está visible pero el color de la pestaña está establecido en automático, se devolverá una cadena vacía. De lo contrario, la propiedad se establecerá en un color, con el formato " \# 123456" cuando se establezca el color, use una cadena vacía para establecer un color "auto" o un color real en caso contrario.'
    name: tabColor
    fullName: tabColor
    langs:
      - typeScript
    type: property
    syntax:
      content: 'tabColor: string;'
      return:
        type:
          - string
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let activeSheet = context.workbook.worksheets.getActiveWorksheet();
              activeSheet.tabColor = "#FF0000";

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.Worksheet#tables:member'
    summary: Colección de tablas que forman parte de la hoja de cálculo.
    name: tables
    fullName: tables
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly tables: TableCollection;'
      return:
        type:
          - 'excel!Excel.TableCollection:interface'
  - uid: 'excel!Excel.Worksheet#verticalPageBreaks:member'
    summary: Obtiene la colección de saltos de página verticales de la hoja de cálculo. Esta colección solo contiene saltos de página manuales.
    name: verticalPageBreaks
    fullName: verticalPageBreaks
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly verticalPageBreaks: PageBreakCollection;'
      return:
        type:
          - 'excel!Excel.PageBreakCollection:interface'
  - uid: 'excel!Excel.Worksheet#visibility:member'
    summary: Visibilidad de la hoja de cálculo.
    name: visibility
    fullName: visibility
    langs:
      - typeScript
    type: property
    syntax:
      content: 'visibility: SheetVisibility | "Visible" | "Hidden" | "VeryHidden";'
      return:
        type:
          - 'excel!Excel.Worksheet#visibility~0:complex'
references:
  - uid: 'excel!Excel.AutoFilter:interface'
    name: AutoFilter
    fullName: Excel.AutoFilter
  - uid: 'excel!Excel.ChartCollection:interface'
    name: ChartCollection
    fullName: Excel.ChartCollection
  - uid: 'excel!Excel.CommentCollection:interface'
    name: CommentCollection
    fullName: Excel.CommentCollection
  - uid: 'excel!Excel.Worksheet:interface'
    name: Worksheet
    fullName: Excel.Worksheet
  - uid: 'excel!Excel.Worksheet#copy~0:complex'
    name: |-
      | WorksheetPositionType
                      | "None"
                      | "Before"
                      | "After"
                      | "Beginning"
                      | "End"
    fullName: |-
      | Excel.WorksheetPositionType
                      | "None"
                      | "Before"
                      | "After"
                      | "Beginning"
                      | "End"
    spec.typeScript:
      - name: '| '
        fullName: '| '
      - uid: 'excel!Excel.WorksheetPositionType:enum'
        name: WorksheetPositionType
        fullName: Excel.WorksheetPositionType
      - name: |2-

                          | "None"
                          | "Before"
                          | "After"
                          | "Beginning"
                          | "End"
        fullName: |2-

                          | "None"
                          | "Before"
                          | "After"
                          | "Beginning"
                          | "End"
  - uid: 'excel!Excel.RangeAreas:interface'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.WorksheetSearchCriteria:interface'
    name: WorksheetSearchCriteria
    fullName: Excel.WorksheetSearchCriteria
  - uid: 'excel!Excel.WorksheetFreezePanes:interface'
    name: WorksheetFreezePanes
    fullName: Excel.WorksheetFreezePanes
  - uid: 'excel!Excel.Range:interface'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.PageBreakCollection:interface'
    name: PageBreakCollection
    fullName: Excel.PageBreakCollection
  - uid: 'excel!Excel.NamedItemCollection:interface'
    name: NamedItemCollection
    fullName: Excel.NamedItemCollection
  - uid: 'excel!Excel.PageLayout:interface'
    name: PageLayout
    fullName: Excel.PageLayout
  - uid: 'excel!Excel.PivotTableCollection:interface'
    name: PivotTableCollection
    fullName: Excel.PivotTableCollection
  - uid: 'excel!Excel.WorksheetProtection:interface'
    name: WorksheetProtection
    fullName: Excel.WorksheetProtection
  - uid: 'excel!Excel.Worksheet#replaceAll~0:complex'
    name: ClientResult<number>
    fullName: Excel.ClientResult<number>
    spec.typeScript:
      - uid: 'excel!Excel.ClientResult:interface'
        name: ClientResult
        fullName: Excel.ClientResult
      - name: <number>
        fullName: <number>
  - uid: 'excel!Excel.ReplaceCriteria:interface'
    name: ReplaceCriteria
    fullName: Excel.ReplaceCriteria
  - uid: 'excel!Excel.ShapeCollection:interface'
    name: ShapeCollection
    fullName: Excel.ShapeCollection
  - uid: 'excel!Excel.SlicerCollection:interface'
    name: SlicerCollection
    fullName: Excel.SlicerCollection
  - uid: 'excel!Excel.TableCollection:interface'
    name: TableCollection
    fullName: Excel.TableCollection
  - uid: 'excel!Excel.Worksheet#visibility~0:complex'
    name: SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    fullName: Excel.SheetVisibility | "Visible" | "Hidden" | "VeryHidden"
    spec.typeScript:
      - uid: 'excel!Excel.SheetVisibility:enum'
        name: SheetVisibility
        fullName: Excel.SheetVisibility
      - name: ' | "Visible" | "Hidden" | "VeryHidden"'
        fullName: ' | "Visible" | "Hidden" | "VeryHidden"'