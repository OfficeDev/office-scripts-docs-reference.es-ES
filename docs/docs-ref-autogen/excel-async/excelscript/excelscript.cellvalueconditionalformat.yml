### YamlMime:TSType
name: Excel.CellValueConditionalFormat
uid: excel!Excel.CellValueConditionalFormat:interface
package: excel!
fullName: Excel.CellValueConditionalFormat
summary: Representa un formato condicional de valor de celda.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: format
  uid: excel!Excel.CellValueConditionalFormat#format:member
  package: excel!
  fullName: format
  summary: Devuelve un objeto Format, encapsulando la fuente de los formatos condicionales, el relleno, los bordes y otras propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly format: ConditionalRangeFormat;'
    return:
      type: <xref uid="excel!Excel.ConditionalRangeFormat:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = sheet.getRange(\"B21:E23\");\n    let conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n}\n```"
- name: rule
  uid: excel!Excel.CellValueConditionalFormat#rule:member
  package: excel!
  fullName: rule
  summary: Especifica el objeto Rule en este formato condicional.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'rule: ConditionalCellValueRule;'
    return:
      type: <xref uid="excel!Excel.ConditionalCellValueRule:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let range = sheet.getRange(\"B21:E23\");\n    let conditionalFormat = range.conditionalFormats\n        .add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n}\n```"
methods:
- name: load(propertyNames)
  uid: excel!Excel.CellValueConditionalFormat#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
      type: string | string[]
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: a5c09a48692c846514b959a9a7099557bf8a464e
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49417781"
