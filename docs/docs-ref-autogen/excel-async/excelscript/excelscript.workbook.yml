### YamlMime:TSType
name: Excel.Workbook
uid: excel!Excel.Workbook:interface
package: excel!
fullName: Excel.Workbook
summary: Workbook es el objeto de nivel superior que contiene los objetos de libro relacionados, como hojas de cálculo, tablas, intervalos, etc. Para obtener más información sobre el modelo de objetos de libro, lea [trabajar con libros mediante la API de JavaScript de Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-workbooks)<!-- -->.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: application
  uid: excel!Excel.Workbook#application:member
  package: excel!
  fullName: application
  summary: Representa la instancia de la aplicación de Excel que contiene este libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly application: Application;'
    return:
      type: <xref uid="excel!Excel.Application:interface" />
- name: autoSave
  uid: excel!Excel.Workbook#autoSave:member
  package: excel!
  fullName: autoSave
  summary: Especifica si el libro está en modo de autoguardado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly autoSave: boolean;'
    return:
      type: boolean
- name: bindings
  uid: excel!Excel.Workbook#bindings:member
  package: excel!
  fullName: bindings
  summary: Representa una colección de enlaces que forman parte del libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly bindings: BindingCollection;'
    return:
      type: <xref uid="excel!Excel.BindingCollection:interface" />
- name: calculationEngineVersion
  uid: excel!Excel.Workbook#calculationEngineVersion:member
  package: excel!
  fullName: calculationEngineVersion
  summary: Devuelve un número acerca de la versión del motor de cálculo de Excel.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly calculationEngineVersion: number;'
    return:
      type: number
- name: chartDataPointTrack
  uid: excel!Excel.Workbook#chartDataPointTrack:member
  package: excel!
  fullName: chartDataPointTrack
  summary: True si todos los gráficos en el libro están siguiendo los puntos de datos reales a los que están conectados. False si los gráficos realizan un seguimiento del índice de los puntos de datos.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'chartDataPointTrack: boolean;'
    return:
      type: boolean
- name: comments
  uid: excel!Excel.Workbook#comments:member
  package: excel!
  fullName: comments
  summary: Indica una colección de comentarios asociada con el libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly comments: CommentCollection;'
    return:
      type: <xref uid="excel!Excel.CommentCollection:interface" />
- name: customXmlParts
  uid: excel!Excel.Workbook#customXmlParts:member
  package: excel!
  fullName: customXmlParts
  summary: Representa la colección de elementos XML personalizados contenidos en este libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly customXmlParts: CustomXmlPartCollection;'
    return:
      type: <xref uid="excel!Excel.CustomXmlPartCollection:interface" />
- name: dataConnections
  uid: excel!Excel.Workbook#dataConnections:member
  package: excel!
  fullName: dataConnections
  summary: Representa todas las conexiones de datos en el libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly dataConnections: DataConnectionCollection;'
    return:
      type: <xref uid="excel!Excel.DataConnectionCollection:interface" />
- name: isDirty
  uid: excel!Excel.Workbook#isDirty:member
  package: excel!
  fullName: isDirty
  summary: Especifica si se han realizado cambios desde la última vez que se guardó el libro. Puede establecer esta propiedad en true si desea cerrar un libro modificado sin guardarlo o sin que se le pida que lo guarde.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'isDirty: boolean;'
    return:
      type: boolean
- name: name
  uid: excel!Excel.Workbook#name:member
  package: excel!
  fullName: name
  summary: Obtiene el nombre del libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly name: string;'
    return:
      type: string
- name: names
  uid: excel!Excel.Workbook#names:member
  package: excel!
  fullName: names
  summary: Representa una colección de elementos con nombre en el ámbito del libro (intervalos y constantes con nombre).
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly names: NamedItemCollection;'
    return:
      type: <xref uid="excel!Excel.NamedItemCollection:interface" />
- name: pivotTables
  uid: excel!Excel.Workbook#pivotTables:member
  package: excel!
  fullName: pivotTables
  summary: Representa una colección de tablas dinámicas asociadas con el libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pivotTables: PivotTableCollection;'
    return:
      type: <xref uid="excel!Excel.PivotTableCollection:interface" />
- name: pivotTableStyles
  uid: excel!Excel.Workbook#pivotTableStyles:member
  package: excel!
  fullName: pivotTableStyles
  summary: Representa una colección de PivotTableStyles asociados con el libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly pivotTableStyles: PivotTableStyleCollection;'
    return:
      type: <xref uid="excel!Excel.PivotTableStyleCollection:interface" />
- name: previouslySaved
  uid: excel!Excel.Workbook#previouslySaved:member
  package: excel!
  fullName: previouslySaved
  summary: Especifica si el libro se ha guardado alguna vez localmente o en línea.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly previouslySaved: boolean;'
    return:
      type: boolean
- name: properties
  uid: excel!Excel.Workbook#properties:member
  package: excel!
  fullName: properties
  summary: Obtiene las propiedades del libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly properties: DocumentProperties;'
    return:
      type: <xref uid="excel!Excel.DocumentProperties:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let titleValue = \"Excel document properties API\";\n    let subjectValue = \"Set and get document properties\";\n    let keywordsValue = \"Set and get operations\";\n    let commentsValue = \"This is an Excel document properties API code sample\";\n    let categoryValue = \"Office Add-ins\";\n    let managerValue = \"John\";\n    let companyValue = \"Microsoft\";\n\n    let docProperties = context.workbook.properties;\n\n    // Set the writeable document properties.\n    docProperties.title = titleValue;\n    docProperties.subject = subjectValue;\n    docProperties.keywords = keywordsValue;\n    docProperties.comments = commentsValue;\n    docProperties.category = categoryValue;\n    docProperties.manager = managerValue;\n    docProperties.company = companyValue;\n\n    await context.sync();\n\n    console.log(\"Set the following document properties: title, subject, keywords, comments, category, manager, company.\");\n}\n```"
- name: protection
  uid: excel!Excel.Workbook#protection:member
  package: excel!
  fullName: protection
  summary: Devuelve el objeto Protection de un libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly protection: WorkbookProtection;'
    return:
      type: <xref uid="excel!Excel.WorkbookProtection:interface" />
- name: readOnly
  uid: excel!Excel.Workbook#readOnly:member
  package: excel!
  fullName: readOnly
  summary: True si el libro está abierto en modo de solo lectura.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly readOnly: boolean;'
    return:
      type: boolean
- name: slicers
  uid: excel!Excel.Workbook#slicers:member
  package: excel!
  fullName: slicers
  summary: Representa una colección de segmentaciones asociada con el libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly slicers: SlicerCollection;'
    return:
      type: <xref uid="excel!Excel.SlicerCollection:interface" />
- name: slicerStyles
  uid: excel!Excel.Workbook#slicerStyles:member
  package: excel!
  fullName: slicerStyles
  summary: Representa una colección de SlicerStyles asociados con el libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly slicerStyles: SlicerStyleCollection;'
    return:
      type: <xref uid="excel!Excel.SlicerStyleCollection:interface" />
- name: styles
  uid: excel!Excel.Workbook#styles:member
  package: excel!
  fullName: styles
  summary: Representa una colección de estilos asociada con el libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly styles: StyleCollection;'
    return:
      type: <xref uid="excel!Excel.StyleCollection:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let styles = context.workbook.styles;\n\n    // Add a new style to the style collection.\n    // Styles is in the Home tab ribbon.\n    styles.add(\"Diagonal Orientation Style\");\n          \n    let newStyle = styles.getItem(\"Diagonal Orientation Style\");\n    \n    // The \"Diagonal Orientation Style\" properties.\n    newStyle.textOrientation = 38;\n    newStyle.autoIndent = true;\n    newStyle.includeProtection = true;\n    newStyle.shrinkToFit = true;\n    newStyle.locked = false;\n    \n    await context.sync();\n\n    console.log(\"Successfully added a new style with diagonal orientation to the Home tab ribbon.\");\n}\n```"
- name: tables
  uid: excel!Excel.Workbook#tables:member
  package: excel!
  fullName: tables
  summary: Representa una colección de tablas asociadas con el libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly tables: TableCollection;'
    return:
      type: <xref uid="excel!Excel.TableCollection:interface" />
- name: tableStyles
  uid: excel!Excel.Workbook#tableStyles:member
  package: excel!
  fullName: tableStyles
  summary: Representa una colección de TableStyles asociados con el libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly tableStyles: TableStyleCollection;'
    return:
      type: <xref uid="excel!Excel.TableStyleCollection:interface" />
- name: timelineStyles
  uid: excel!Excel.Workbook#timelineStyles:member
  package: excel!
  fullName: timelineStyles
  summary: Representa una colección de TimelineStyles asociados con el libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly timelineStyles: TimelineStyleCollection;'
    return:
      type: <xref uid="excel!Excel.TimelineStyleCollection:interface" />
- name: usePrecisionAsDisplayed
  uid: excel!Excel.Workbook#usePrecisionAsDisplayed:member
  package: excel!
  fullName: usePrecisionAsDisplayed
  summary: True si los cálculos de este libro se llevan a cabo con la misma precisión con que se muestran los números. Los datos perderán la precisión cuando se cambie esta propiedad de false a true.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'usePrecisionAsDisplayed: boolean;'
    return:
      type: boolean
- name: worksheets
  uid: excel!Excel.Workbook#worksheets:member
  package: excel!
  fullName: worksheets
  summary: Representa una colección de hojas de cálculo asociadas con el libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheets: WorksheetCollection;'
    return:
      type: <xref uid="excel!Excel.WorksheetCollection:interface" />
methods:
- name: getActiveCell()
  uid: excel!Excel.Workbook#getActiveCell:member(1)
  package: excel!
  fullName: getActiveCell()
  summary: Obtiene la celda activa del libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveCell(): Range;'
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n\n    let myWorkbook = context.workbook;\n    let activeCell = myWorkbook.getActiveCell();\n    activeCell.load(\"address\");\n\n    await context.sync();\n    \n    console.log(\"The active cell is \" + activeCell.address);\n}\n```"
- name: getActiveChart()
  uid: excel!Excel.Workbook#getActiveChart:member(1)
  package: excel!
  fullName: getActiveChart()
  summary: Obtiene el gráfico activo del libro. Si no hay ningún gráfico activo, `ItemNotFound` se produce una excepción.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveChart(): Chart;'
    return:
      type: <xref uid="excel!Excel.Chart:interface" />
      description: ''
- name: getActiveChartOrNullObject()
  uid: excel!Excel.Workbook#getActiveChartOrNullObject:member(1)
  package: excel!
  fullName: getActiveChartOrNullObject()
  summary: Obtiene el gráfico activo del libro. Si no hay ningún gráfico activo, se devuelve un objeto null.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveChartOrNullObject(): Chart;'
    return:
      type: <xref uid="excel!Excel.Chart:interface" />
      description: ''
- name: getActiveSlicer()
  uid: excel!Excel.Workbook#getActiveSlicer:member(1)
  package: excel!
  fullName: getActiveSlicer()
  summary: Obtiene la segmentación activa del libro. Si no hay ningún rebanador activo, `ItemNotFound` se produce una excepción.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveSlicer(): Slicer;'
    return:
      type: <xref uid="excel!Excel.Slicer:interface" />
      description: ''
- name: getActiveSlicerOrNullObject()
  uid: excel!Excel.Workbook#getActiveSlicerOrNullObject:member(1)
  package: excel!
  fullName: getActiveSlicerOrNullObject()
  summary: Obtiene la segmentación activa del libro. Si no hay ninguna segmentación de datos activa, se devuelve un objeto nulo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveSlicerOrNullObject(): Slicer;'
    return:
      type: <xref uid="excel!Excel.Slicer:interface" />
      description: ''
- name: getSelectedRange()
  uid: excel!Excel.Workbook#getSelectedRange:member(1)
  package: excel!
  fullName: getSelectedRange()
  summary: Obtiene el intervalo único seleccionado actualmente desde el libro. Si hay varios rangos seleccionados, este método generará un error.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRange(): Range;'
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getSelectedRanges()
  uid: excel!Excel.Workbook#getSelectedRanges:member(1)
  package: excel!
  fullName: getSelectedRanges()
  summary: Obtiene los intervalos seleccionados actualmente en el libro. A diferencia de getSelectedRange(), este método devuelve un objeto RangeAreas que representa todos los intervalos seleccionados.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getSelectedRanges(): RangeAreas;'
    return:
      type: <xref uid="excel!Excel.RangeAreas:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n\n    let selectedRanges = context.workbook.getSelectedRanges();\n    selectedRanges.format.fill.color = \"lightblue\";\n\n    await context.sync();\n})\n```"
- name: load(propertyNames)
  uid: excel!Excel.Workbook#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
      type: string | string[]
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 8163385dfac4e4ed347cdd90ca0a682dabffffe4
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49412639"
