### YamlMime:TSType
name: Excel.NamedItem
uid: excel!Excel.NamedItem:interface
package: excel!
fullName: Excel.NamedItem
summary: Representa un nombre definido para un rango de celdas o un valor. Los nombres pueden ser objetos con nombre primitivo (como se ve en el tipo siguiente), un objeto de intervalo o una referencia a un rango. Este objeto puede usarse para obtener un objeto de rango asociado a nombres.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
- name: arrayValues
  uid: excel!Excel.NamedItem#arrayValues:member
  package: excel!
  fullName: arrayValues
  summary: Devuelve un objeto que contiene los valores y tipos del elemento con nombre.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly arrayValues: NamedItemArrayValues;'
    return:
      type: <xref uid="excel!Excel.NamedItemArrayValues:interface" />
- name: comment
  uid: excel!Excel.NamedItem#comment:member
  package: excel!
  fullName: comment
  summary: Especifica el comentario asociado con este nombre.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'comment: string;'
    return:
      type: string
- name: formula
  uid: excel!Excel.NamedItem#formula:member
  package: excel!
  fullName: formula
  summary: Fórmula del elemento con nombre. La fórmula siempre comienza con el signo "=".
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'formula: any;'
    return:
      type: any
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    // Get the named item\n    let myNamedItem = sheet.names.getItemOrNullObject(\"MyRange\");\n    myNamedItem.load(\"name, formula\");\n    await context.sync();\n\n    if (myNamedItem.isNullObject) {\n        console.log(`There is no named item. Create it with \"Add named item for a range\" first.`);\n    } else {                    \n        // Update named item to point to the second range\n        myNamedItem.formula = \"=Sample!$B$10:$D$14\";\n        sheet.getRange(\"B10:D14\").select();\n        await context.sync();\n\n        console.log(`Just updated the named item \"${myNamedItem.name}\" -- it's now located here: ${myNamedItem.formula}`);\n    }\n}\n```"
- name: name
  uid: excel!Excel.NamedItem#name:member
  package: excel!
  fullName: name
  summary: Nombre del objeto.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly name: string;'
    return:
      type: string
- name: scope
  uid: excel!Excel.NamedItem#scope:member
  package: excel!
  fullName: scope
  summary: 'Especifica si el nombre está en el ámbito del libro o en una hoja de cálculo específica. Los valores posibles son: Worksheet, Workbook.'
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly scope: NamedItemScope | "Worksheet" | "Workbook";'
    return:
      type: <xref uid="excel!Excel.NamedItemScope:enum" /> | "Worksheet" | "Workbook"
- name: type
  uid: excel!Excel.NamedItem#type:member
  package: excel!
  fullName: type
  summary: Especifica el tipo de valor devuelto por la fórmula del nombre. Consulte Excel. NamedItemType para obtener información detallada.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: >-
      readonly type:
                  | NamedItemType
                  | "String"
                  | "Integer"
                  | "Double"
                  | "Boolean"
                  | "Range"
                  | "Error"
                  | "Array";
    return:
      type: >-
        | <xref uid="excel!Excel.NamedItemType:enum" />
                    | "String"
                    | "Integer"
                    | "Double"
                    | "Boolean"
                    | "Range"
                    | "Error"
                    | "Array"
- name: value
  uid: excel!Excel.NamedItem#value:member
  package: excel!
  fullName: value
  summary: Representa el valor calculado por la fórmula del nombre. Para un rango con nombre, devolverá la dirección del rango.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly value: any;'
    return:
      type: any
- name: visible
  uid: excel!Excel.NamedItem#visible:member
  package: excel!
  fullName: visible
  summary: Especifica si el objeto es visible.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'visible: boolean;'
    return:
      type: boolean
- name: worksheet
  uid: excel!Excel.NamedItem#worksheet:member
  package: excel!
  fullName: worksheet
  summary: Devuelve la hoja de cálculo que tiene como ámbito el elemento con nombre. Produce un error si el elemento se encuentra en su lugar en el ámbito del libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheet: Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
- name: worksheetOrNullObject
  uid: excel!Excel.NamedItem#worksheetOrNullObject:member
  package: excel!
  fullName: worksheetOrNullObject
  summary: Devuelve la hoja de cálculo que tiene como ámbito el elemento con nombre. Devuelve un objeto NULL si el ámbito del elemento es el libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'readonly worksheetOrNullObject: Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
methods:
- name: delete()
  uid: excel!Excel.NamedItem#delete:member(1)
  package: excel!
  fullName: delete()
  summary: Elimina el nombre especificado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let totalName = sheet.names.getItemOrNullObject(\"TotalAmount\");\n    totalName.load();\n    await context.sync();\n\n    if (totalName.value) {\n        totalName.delete();\n\n        // Replace the named item (TotalAmount) with the actual formula for TotalAmount to avoid displaying #NAME in the cell.\n        sheet.getRange(\"D11\").values = [[\"=SUM(ExpensesTable[AMOUNT])\"]];\n    } else {\n        console.log(\"No named item created for the formula.\");\n    }\n\n    await context.sync();\n}\n```"
- name: getRange()
  uid: excel!Excel.NamedItem#getRange:member(1)
  package: excel!
  fullName: getRange()
  summary: Devuelve el objeto de rango asociado al nombre. Se produce un error si el tipo del elemento con nombre no es un rango.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(): Range;'
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: getRangeOrNullObject()
  uid: excel!Excel.NamedItem#getRangeOrNullObject:member(1)
  package: excel!
  fullName: getRangeOrNullObject()
  summary: Devuelve el objeto de rango asociado al nombre. Devuelve un objeto NULL si el tipo de elemento con nombre no es un rango.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRangeOrNullObject(): Range;'
    return:
      type: <xref uid="excel!Excel.Range:interface" />
      description: ''
- name: load(propertyNames)
  uid: excel!Excel.NamedItem#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
      type: string | string[]
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 997de6c6512e3f455b29d74df0acc11e054a7739
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49419904"
