### YamlMime:TSType
name: Excel.WorksheetCollection
uid: excel!Excel.WorksheetCollection:interface
package: excel!
fullName: Excel.WorksheetCollection
summary: Representa una colección de objetos de hoja de cálculo que forman parte del libro.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: add(name)
  uid: excel!Excel.WorksheetCollection#add:member(1)
  package: excel!
  fullName: add(name)
  summary: Agrega una nueva hoja al libro. La hoja de cálculo se agregará al final de las hojas de cálculo existentes. Si desea activar la hoja de cálculo recién agregada, llame en ella a ".activate().
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'add(name?: string): Worksheet;'
    parameters:
    - id: name
      description: Opcional. Nombre de la hoja de cálculo que se va a agregar. Si se especifica, el nombre debe ser único. Si no se especifica, Excel determina el nombre de la nueva hoja de cálculo.
      type: string
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getActiveWorksheet()
  uid: excel!Excel.WorksheetCollection#getActiveWorksheet:member(1)
  package: excel!
  fullName: getActiveWorksheet()
  summary: Obtiene la hoja de cálculo activa del libro.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getActiveWorksheet(): Worksheet;'
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getCount(visibleOnly)
  uid: excel!Excel.WorksheetCollection#getCount:member(1)
  package: excel!
  fullName: getCount(visibleOnly)
  summary: Obtiene el número de hojas de cálculo de la colección.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCount(visibleOnly?: boolean): ClientResult<number>;'
    parameters:
    - id: visibleOnly
      description: Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.ClientResult:interface" />&lt;number&gt;
      description: ''
- name: getFirst(visibleOnly)
  uid: excel!Excel.WorksheetCollection#getFirst:member(1)
  package: excel!
  fullName: getFirst(visibleOnly)
  summary: Obtiene la primera hoja de cálculo de la colección.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getFirst(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    let firstSheet = sheets.getFirst().getNext();\n    let lastSheet = sheets.getLast();\n    let firstTaxRateRange = firstSheet.getRange(\"B2\");\n    let lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n}\n```"
- name: getItem(key)
  uid: excel!Excel.WorksheetCollection#getItem:member(1)
  package: excel!
  fullName: getItem(key)
  summary: Obtiene un objeto de hoja de cálculo mediante su nombre o identificador.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItem(key: string): Worksheet;'
    parameters:
    - id: key
      description: Nombre o identificador de la hoja de cálculo.
      type: string
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getItemOrNullObject(key)
  uid: excel!Excel.WorksheetCollection#getItemOrNullObject:member(1)
  package: excel!
  fullName: getItemOrNullObject(key)
  summary: Obtiene un objeto de hoja de cálculo mediante su nombre o identificador. Si la hoja de cálculo no existe, devolverá un objeto NULL.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getItemOrNullObject(key: string): Worksheet;'
    parameters:
    - id: key
      description: Nombre o identificador de la hoja de cálculo.
      type: string
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: ''
- name: getLast(visibleOnly)
  uid: excel!Excel.WorksheetCollection#getLast:member(1)
  package: excel!
  fullName: getLast(visibleOnly)
  summary: Obtiene la última hoja de cálculo de la colección.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getLast(visibleOnly?: boolean): Worksheet;'
    parameters:
    - id: visibleOnly
      description: Opcional. Si es true, solo tiene en cuenta las hojas de cálculo visibles y se omite sobre las ocultas.
      type: boolean
    return:
      type: <xref uid="excel!Excel.Worksheet:interface" />
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```typescript\nasync function main(context: Excel.RequestContext) {\n    let sheets = context.workbook.worksheets;\n\n    // We don't want to include the default worksheet that was created\n    // when the workbook was created, so our \"firstSheet\" will be the one\n    // after the literal first. Note chaining of navigation methods.\n    let firstSheet = sheets.getFirst().getNext();\n    let lastSheet = sheets.getLast();\n    let firstTaxRateRange = firstSheet.getRange(\"B2\");\n    let lastTaxRateRange = lastSheet.getRange(\"B2\");\n\n    firstSheet.load(\"name\");\n    lastSheet.load(\"name\");\n    firstTaxRateRange.load(\"text\");\n    lastTaxRateRange.load(\"text\");\n\n    await context.sync();\n\n    let firstYear = firstSheet.name.substr(5, 4);\n    let lastYear = lastSheet.name.substr(5, 4);\n    console.log(`Tax Rate change from ${firstYear} to ${lastYear}`, `Tax rate for ${firstYear}: ${firstTaxRateRange.text[0][0]}\\nTax rate for ${lastYear}: ${lastTaxRateRange.text[0][0]}`)\n\n    await context.sync();\n}\n```"
- name: load(propertyNames)
  uid: excel!Excel.WorksheetCollection#load:member(1)
  package: excel!
  fullName: load(propertyNames)
  summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar a `context.sync()` antes de leer las propiedades.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'load(propertyNames?: string | string[]): void;'
    parameters:
    - id: propertyNames
      description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
      type: string | string[]
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 61e5897d3f1e998cf0178cdd645dea173b17d823
  ms.sourcegitcommit: e62d18a494e9cc7f26dac222660a2237fd073c56
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 11/25/2020
  ms.locfileid: "49418124"
