### YamlMime:UniversalReference
items:
  - uid: 'excel!Excel.ConditionalFormat:class'
    summary: 'Un objeto que encapsula el intervalo, el formato, la regla y otras propiedades del formato condicional. Para obtener más información sobre el modelo de objetos de formato condicional, vea [aplicar formato condicional a los rangos de Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-conditional-formatting)<!-- -->.'
    name: Excel.ConditionalFormat
    fullName: Excel.ConditionalFormat
    langs:
      - typeScript
    type: class
    package: excel!
    children:
      - 'excel!Excel.ConditionalFormat#cellValue:member'
      - 'excel!Excel.ConditionalFormat#cellValueOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#colorScale:member'
      - 'excel!Excel.ConditionalFormat#colorScaleOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#context:member'
      - 'excel!Excel.ConditionalFormat#custom:member'
      - 'excel!Excel.ConditionalFormat#customOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#dataBar:member'
      - 'excel!Excel.ConditionalFormat#dataBarOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#delete:member(1)'
      - 'excel!Excel.ConditionalFormat#getRange:member(1)'
      - 'excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
      - 'excel!Excel.ConditionalFormat#getRanges:member(1)'
      - 'excel!Excel.ConditionalFormat#iconSet:member'
      - 'excel!Excel.ConditionalFormat#iconSetOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#id:member'
      - 'excel!Excel.ConditionalFormat#load:member(1)'
      - 'excel!Excel.ConditionalFormat#load:member(2)'
      - 'excel!Excel.ConditionalFormat#preset:member'
      - 'excel!Excel.ConditionalFormat#presetOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#priority:member'
      - 'excel!Excel.ConditionalFormat#set:member(1)'
      - 'excel!Excel.ConditionalFormat#stopIfTrue:member'
      - 'excel!Excel.ConditionalFormat#textComparison:member'
      - 'excel!Excel.ConditionalFormat#textComparisonOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#topBottom:member'
      - 'excel!Excel.ConditionalFormat#topBottomOrNullObject:member'
      - 'excel!Excel.ConditionalFormat#type:member'
  - uid: 'excel!Excel.ConditionalFormat#cellValue:member'
    summary: 'Devuelve las propiedades de formato condicional del valor de celda si el formato condicional actual es un tipo CellValue. Por ejemplo, para dar formato a todas las celdas comprendidas entre 5 y 10. Solo lectura.'
    name: cellValue
    fullName: cellValue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValue: Excel.CellValueConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CellValueConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B21:E23");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.cellValue);
              conditionalFormat.cellValue.format.font.color = "red";
              conditionalFormat.cellValue.rule = { formula1: "=0", operator: "LessThan" };

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#cellValueOrNullObject:member'
    summary: 'Devuelve las propiedades de formato condicional del valor de celda si el formato condicional actual es un tipo CellValue. Por ejemplo, para dar formato a todas las celdas comprendidas entre 5 y 10. Solo lectura.'
    name: cellValueOrNullObject
    fullName: cellValueOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly cellValueOrNullObject: Excel.CellValueConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CellValueConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#colorScale:member'
    summary: Devuelve las propiedades del formato condicional de ColorScale si el formato condicional actual es un tipo ColorScale. Solo lectura.
    name: colorScale
    fullName: colorScale
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScale: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ColorScaleConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:M5");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.colorScale);
              let criteria = {
                  minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: "blue" },
                  midpoint: { formula: "50", type: Excel.ConditionalFormatColorCriterionType.percent, color: "yellow" },
                  maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: "red" }
              };
              conditionalFormat.colorScale.criteria = criteria;

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#colorScaleOrNullObject:member'
    summary: Devuelve las propiedades del formato condicional de ColorScale si el formato condicional actual es un tipo ColorScale. Solo lectura.
    name: colorScaleOrNullObject
    fullName: colorScaleOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly colorScaleOrNullObject: Excel.ColorScaleConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ColorScaleConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#context:member'
    summary: Contexto de la solicitud asociado al objeto. Esto conecta el proceso del complemento con el proceso de la aplicación host de Office.
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'context: RequestContext;'
      return:
        type:
          - 'excel!Excel.RequestContext:class'
  - uid: 'excel!Excel.ConditionalFormat#custom:member'
    summary: Devuelve las propiedades de formato condicional personalizado si el formato condicional actual es un tipo personalizado. Solo lectura.
    name: custom
    fullName: custom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly custom: Excel.CustomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CustomConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);
              conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT("RC[-1]",0),TRUE)';
              conditionalFormat.custom.format.font.color = "green";

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#customOrNullObject:member'
    summary: Devuelve las propiedades de formato condicional personalizado si el formato condicional actual es un tipo personalizado. Solo lectura.
    name: customOrNullObject
    fullName: customOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly customOrNullObject: Excel.CustomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.CustomConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#dataBar:member'
    summary: Devuelve las propiedades de la barra de datos si el formato condicional actual es una barra de datos. Solo lectura.
    name: dataBar
    fullName: dataBar
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBar: Excel.DataBarConditionalFormat;'
      return:
        type:
          - 'excel!Excel.DataBarConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.dataBar);
              conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#dataBarOrNullObject:member'
    summary: Devuelve las propiedades de la barra de datos si el formato condicional actual es una barra de datos. Solo lectura.
    name: dataBarOrNullObject
    fullName: dataBarOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly dataBarOrNullObject: Excel.DataBarConditionalFormat;'
      return:
        type:
          - 'excel!Excel.DataBarConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#delete:member(1)'
    summary: Elimina este formato condicional.
    name: delete()
    fullName: delete()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#getRange:member(1)'
    summary: Devuelve el intervalo en el que se aplica el formato condicional. Produce un error si el formato condicional se aplica a varios rangos. Solo lectura.
    name: getRange()
    fullName: getRange()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRange(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#getRangeOrNullObject:member(1)'
    summary: Devuelve el intervalo al que se aplica el formato condicional o un objeto NULL si el formato condicional se aplica a varios rangos. Solo lectura.
    name: getRangeOrNullObject()
    fullName: getRangeOrNullObject()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRangeOrNullObject(): Excel.Range;'
      return:
        type:
          - 'excel!Excel.Range:class'
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#getRanges:member(1)'
    summary: 'Devuelve el objeto RangeAreas, que incluye uno o más intervalos rectangulares, al que se aplica el formato condicional. Solo lectura.'
    name: getRanges()
    fullName: getRanges()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRanges(): Excel.RangeAreas;'
      return:
        type:
          - 'excel!Excel.RangeAreas:class'
        description: ''
  - uid: 'excel!Excel.ConditionalFormat#iconSet:member'
    summary: Devuelve las propiedades del formato condicional IconSet si el formato condicional actual es un tipo IconSet. Solo lectura.
    name: iconSet
    fullName: iconSet
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSet: Excel.IconSetConditionalFormat;'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B8:E13");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.iconSet);
              let iconSetCF = conditionalFormat.iconSet;
              iconSetCF.style = Excel.IconSet.threeTriangles;

              /*
                  The iconSetCF.criteria array is automatically prepopulated with
                  criterion elements whose properties have been given default settings.
                  You can't write to each property of a criterion directly. Instead,
                  replace the whole criteria object.

                  With a "three*" icon set style, such as "threeTriangles", the third
                  element in the criteria array (criteria[2]) defines the "top" icon;
                  e.g., a green triangle. The second (criteria[1]) defines the "middle"
                  icon, The first (criteria[0]) defines the "low" icon, but it
                  can often be left empty as this method does below, because every
                  cell that does not match the other two criteria always gets the low
                  icon.            
              */
              iconSetCF.criteria = [
                  {} as any,
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=700"
                  },
                  {
                      type: Excel.ConditionalFormatIconRuleType.number,
                      operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,
                      formula: "=1000",
                  }
              ];

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#iconSetOrNullObject:member'
    summary: Devuelve las propiedades del formato condicional IconSet si el formato condicional actual es un tipo IconSet. Solo lectura.
    name: iconSetOrNullObject
    fullName: iconSetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly iconSetOrNullObject: Excel.IconSetConditionalFormat;'
      return:
        type:
          - 'excel!Excel.IconSetConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#id:member'
    summary: La prioridad del formato condicional dentro de la ConditionalFormatCollection actual. Solo lectura.
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: 'excel!Excel.ConditionalFormat#load:member(1)'
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNames)
    fullName: load(propertyNames)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'load(propertyNames?: string | string[]): Excel.ConditionalFormat;'
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNames
          description: Una cadena delimitada por comas o una matriz de cadenas que especifican las propiedades que se van a cargar.
          type:
            - 'string | string[]'
  - uid: 'excel!Excel.ConditionalFormat#load:member(2)'
    summary: Pone en cola un comando para cargar las propiedades especificadas del objeto. Debe llamar `context.sync()` antes de leer las propiedades.
    name: load(propertyNamesAndPaths)
    fullName: load(propertyNamesAndPaths)
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        load(propertyNamesAndPaths?: {
                    select?: string;
                    expand?: string;
                }): Excel.ConditionalFormat;
      return:
        type:
          - 'excel!Excel.ConditionalFormat:class'
        description: ''
      parameters:
        - id: propertyNamesAndPaths
          description: '`propertyNamesAndPaths.select`es una cadena delimitada por comas que especifica las propiedades que se van `propertyNamesAndPaths.expand` a cargar y es una cadena delimitada por comas que especifica las propiedades de navegación que se deben cargar.'
          type:
            - |-
              {
                          select?: string;
                          expand?: string;
                      }
  - uid: 'excel!Excel.ConditionalFormat#preset:member'
    summary: Devuelve el formato condicional de criterios preestablecidos. Consulte Excel. PresetCriteriaConditionalFormat para obtener más información.
    name: preset
    fullName: preset
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly preset: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - 'excel!Excel.PresetCriteriaConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B2:M5");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.presetCriteria);
              conditionalFormat.preset.format.font.color = "white";
              conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#presetOrNullObject:member'
    summary: Devuelve el formato condicional de criterios preestablecidos. Consulte Excel. PresetCriteriaConditionalFormat para obtener más información.
    name: presetOrNullObject
    fullName: presetOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly presetOrNullObject: Excel.PresetCriteriaConditionalFormat;'
      return:
        type:
          - 'excel!Excel.PresetCriteriaConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#priority:member'
    summary: 'Prioridad (o índice) dentro de la colección de formato condicional en la que este formato condicional existe actualmente. Al cambiar esto también cambian las prioridades de otros formatos condicionales, para permitir un orden de prioridad contiguo. Use una prioridad negativa para empezar desde la parte posterior. Las prioridades mayores que los límites se obtienen y se establecen en la prioridad máxima (o mínima si es negativa). Además, tenga en cuenta que si cambia la prioridad, tendrá que volver a capturar una nueva copia del objeto en esa nueva ubicación de prioridad si desea realizar más cambios en ella. Solo lectura.'
    name: priority
    fullName: priority
    langs:
      - typeScript
    type: property
    syntax:
      content: 'priority: number;'
      return:
        type:
          - number
  - uid: 'excel!Excel.ConditionalFormat#set:member(1)'
    summary: 'Establece varias propiedades en el objeto al mismo tiempo, basándose en un objeto cargado existente.'
    name: set(properties)
    fullName: set(properties)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'set(properties: Excel.ConditionalFormat): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: properties
          description: ''
          type:
            - 'excel!Excel.ConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#stopIfTrue:member'
    summary: 'Si se cumplen las condiciones de este formato condicional, los formatos de menor prioridad no surtirán efecto en esa celda. Null en barras de colorscales, conjuntos de iconos y como no hay ningún concepto de StopIfTrue para estos'
    name: stopIfTrue
    fullName: stopIfTrue
    langs:
      - typeScript
    type: property
    syntax:
      content: 'stopIfTrue: boolean;'
      return:
        type:
          - boolean
  - uid: 'excel!Excel.ConditionalFormat#textComparison:member'
    summary: 'Devuelve las propiedades de formato condicional de texto específico si el formato condicional actual es un tipo de texto. Por ejemplo, para dar formato a celdas que coincidan con la palabra "texto". Solo lectura.'
    name: textComparison
    fullName: textComparison
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparison: Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let range = sheet.getRange("B16:D18");
              let conditionalFormat = range.conditionalFormats
                  .add(Excel.ConditionalFormatType.containsText);
              conditionalFormat.textComparison.format.font.color = "red";
              conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: "Delayed" };

              await context.sync();
          }
          ```
  - uid: 'excel!Excel.ConditionalFormat#textComparisonOrNullObject:member'
    summary: 'Devuelve las propiedades de formato condicional de texto específico si el formato condicional actual es un tipo de texto. Por ejemplo, para dar formato a celdas que coincidan con la palabra "texto". Solo lectura.'
    name: textComparisonOrNullObject
    fullName: textComparisonOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly textComparisonOrNullObject: Excel.TextConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TextConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#topBottom:member'
    summary: 'Devuelve las propiedades de formato condicional superior o inferior si el formato condicional actual es un tipo de parte inferior. Por ejemplo, para dar formato al 10% superior o a los 10 elementos inferiores. Solo lectura.'
    name: topBottom
    fullName: topBottom
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottom: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TopBottomConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#topBottomOrNullObject:member'
    summary: 'Devuelve las propiedades de formato condicional superior o inferior si el formato condicional actual es un tipo de parte inferior. Por ejemplo, para dar formato al 10% superior o a los 10 elementos inferiores. Solo lectura.'
    name: topBottomOrNullObject
    fullName: topBottomOrNullObject
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly topBottomOrNullObject: Excel.TopBottomConditionalFormat;'
      return:
        type:
          - 'excel!Excel.TopBottomConditionalFormat:class'
  - uid: 'excel!Excel.ConditionalFormat#type:member'
    summary: Un tipo de formato condicional. Solo se puede establecer una a la vez. Solo lectura.
    name: type
    fullName: type
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly type: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue";'
      return:
        type:
          - 'excel!Excel.ConditionalFormat#type~0:complex'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```typescript
          async function main(context: Excel.RequestContext) {
              let sheet = context.workbook.worksheets.getItem("Sample");
              let worksheetRange = sheet.getRange();
              worksheetRange.conditionalFormats.load("type");

              await context.sync();

              let cfRangePairs: { cf: Excel.ConditionalFormat, range: Excel.Range }[] = [];
              worksheetRange.conditionalFormats.items.forEach(item => {
                  cfRangePairs.push({
                      cf: item,
                      range: item.getRange().load("address")
                  });
              });

              await context.sync();

              if (cfRangePairs.length > 0) {
                  cfRangePairs.forEach(item => {
                      console.log(item.cf.type);
                  });
              } else {
                  console.log("No conditional formats applied.");
              }
          }
          ```
references:
  - uid: 'excel!Excel.CellValueConditionalFormat:class'
    name: CellValueConditionalFormat
    fullName: Excel.CellValueConditionalFormat
  - uid: 'excel!Excel.ColorScaleConditionalFormat:class'
    name: ColorScaleConditionalFormat
    fullName: Excel.ColorScaleConditionalFormat
  - uid: 'excel!Excel.RequestContext:class'
    name: RequestContext
    fullName: Excel.RequestContext
  - uid: 'excel!Excel.CustomConditionalFormat:class'
    name: CustomConditionalFormat
    fullName: Excel.CustomConditionalFormat
  - uid: 'excel!Excel.DataBarConditionalFormat:class'
    name: DataBarConditionalFormat
    fullName: Excel.DataBarConditionalFormat
  - uid: 'excel!Excel.Range:class'
    name: Range
    fullName: Excel.Range
  - uid: 'excel!Excel.RangeAreas:class'
    name: RangeAreas
    fullName: Excel.RangeAreas
  - uid: 'excel!Excel.IconSetConditionalFormat:class'
    name: IconSetConditionalFormat
    fullName: Excel.IconSetConditionalFormat
  - uid: 'excel!Excel.ConditionalFormat:class'
    name: ConditionalFormat
    fullName: Excel.ConditionalFormat
  - uid: 'excel!Excel.PresetCriteriaConditionalFormat:class'
    name: PresetCriteriaConditionalFormat
    fullName: Excel.PresetCriteriaConditionalFormat
  - uid: 'excel!Excel.TextConditionalFormat:class'
    name: TextConditionalFormat
    fullName: Excel.TextConditionalFormat
  - uid: 'excel!Excel.TopBottomConditionalFormat:class'
    name: TopBottomConditionalFormat
    fullName: Excel.TopBottomConditionalFormat
  - uid: 'excel!Excel.ConditionalFormat#type~0:complex'
    name: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
    fullName: Excel.ConditionalFormatType | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"
    spec.typeScript:
      - uid: 'excel!Excel.ConditionalFormatType:enum'
        name: Excel.ConditionalFormatType
        fullName: Excel.ConditionalFormatType
      - name: ' | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'
        fullName: ' | "Custom" | "DataBar" | "ColorScale" | "IconSet" | "TopBottom" | "PresetCriteria" | "ContainsText" | "CellValue"'