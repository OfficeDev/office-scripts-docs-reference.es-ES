### YamlMime:TSType
name: ExcelScript.ConditionalFormat
uid: ExcelScript!ExcelScript.ConditionalFormat:interface
package: ExcelScript!
fullName: ExcelScript.ConditionalFormat
summary: Objeto que encapsula el intervalo, el formato, la regla y otras propiedades de un formato condicional.
remarks: ''
isPreview: false
isDeprecated: false
type: interface
methods:
- name: delete()
  uid: ExcelScript!ExcelScript.ConditionalFormat#delete:member(1)
  package: ExcelScript!
  fullName: delete()
  summary: Elimina este formato condicional.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'delete(): void;'
    return:
      type: void
      description: ''
- name: getCellValue()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getCellValue:member(1)
  package: ExcelScript!
  fullName: getCellValue()
  summary: Devuelve las propiedades de formato condicional del valor de celda si el formato condicional actual es un `CellValue` tipo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCellValue(): CellValueConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.CellValueConditionalFormat:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```TypeScript\n/**\n * This script applies conditional formatting to a range.\n * That formatting is conditional upon the cell's numerical value.\n * Any value between 50 and 75 will have the cell fill color changed and the font made italic.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the range to format.\n  const sheet = workbook.getActiveWorksheet();\n  const ratingColumn = sheet.getRange(\"D2:D20\");\n\n  // Add cell value conditional formatting.\n  const cellValueConditionalFormatting =\n    ratingColumn.addConditionalFormat(ExcelScript.ConditionalFormatType.cellValue).getCellValue();\n  \n  // Create the condition, in this case when the cell value is between 50 and 75.\n  let rule: ExcelScript.ConditionalCellValueRule = {\n    formula1: \"50\",\n    formula2: \"75\",\n    operator: ExcelScript.ConditionalCellValueOperator.between\n  };\n  cellValueConditionalFormatting.setRule(rule);\n\n  // Set the format to apply when the condition is met.\n  let format = cellValueConditionalFormatting.getFormat();\n  format.getFill().setColor(\"yellow\");\n  format.getFont().setItalic(true);\n\n}\n```"
- name: getColorScale()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getColorScale:member(1)
  package: ExcelScript!
  fullName: getColorScale()
  summary: Devuelve las propiedades de formato condicional de escala de colores si el formato condicional actual es un `ColorScale` tipo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getColorScale(): ColorScaleConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.ColorScaleConditionalFormat:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```TypeScript\n/**\n * This script applies a red, white, and blue color scale to the selected range.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the selected range.\n  let selectedRange = workbook.getSelectedRange();\n\n  // Create a new conditional formatting object by adding one to the range.\n  let conditionalFormatting = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.colorScale);\n\n  // Set the colors for the three parts of the scale: minimum, midpoint, and maximum.\n  conditionalFormatting.getColorScale().setCriteria({\n    minimum: {\n      color:\"#F8696B\", /* A pale red. */\n      type:ExcelScript.ConditionalFormatColorCriterionType.lowestValue\n    },\n    midpoint: {\n      color: \"#FCFCFF\", /* Slightly off-white. */\n      formula:'=50',type:ExcelScript.ConditionalFormatColorCriterionType.percentile\n    },\n    maximum: {\n      color: \"#5A8AC6\", /* A pale blue. */\n      type:ExcelScript.ConditionalFormatColorCriterionType.highestValue\n    }\n  });\n}\n```"
- name: getCustom()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getCustom:member(1)
  package: ExcelScript!
  fullName: getCustom()
  summary: Devuelve las propiedades de formato condicional personalizado si el formato condicional actual es un tipo personalizado.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getCustom(): CustomConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.CustomConditionalFormat:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```TypeScript\n/**\n * This script applies a custom conditional formatting to the selected range.\n * A light-green fill is applied to a cell if the value is larger than the value in the row's previous column.\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the selected cells.\n  let selectedRange = workbook.getSelectedRange();\n\n  // Apply a rule for positive change from the previous column.\n  let positiveChange = selectedRange.addConditionalFormat(ExcelScript.ConditionalFormatType.custom);\n  positiveChange.getCustom().getFormat().getFill().setColor(\"lightgreen\");\n  positiveChange.getCustom().getRule().setFormula(`=${selectedRange.getCell(0, 0).getAddress()}>${selectedRange.getOffsetRange(0, -1).getCell(0, 0).getAddress()}`);\n}\n```"
- name: getDataBar()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getDataBar:member(1)
  package: ExcelScript!
  fullName: getDataBar()
  summary: Devuelve las propiedades de la barra de datos si el formato condicional actual es una barra de datos.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getDataBar(): DataBarConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.DataBarConditionalFormat:interface" /> | undefined
      description: ''
- name: getIconSet()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getIconSet:member(1)
  package: ExcelScript!
  fullName: getIconSet()
  summary: Devuelve las propiedades de formato condicional del conjunto de iconos si el formato condicional actual es un `IconSet` tipo.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getIconSet(): IconSetConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.IconSetConditionalFormat:interface" /> | undefined
      description: ''
- name: getId()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getId:member(1)
  package: ExcelScript!
  fullName: getId()
  summary: Prioridad del formato condicional en el actual `ConditionalFormatCollection`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getId(): string;'
    return:
      type: string
      description: ''
- name: getPreset()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getPreset:member(1)
  package: ExcelScript!
  fullName: getPreset()
  summary: Devuelve el formato condicional de los criterios preestablecidos. Consulte `ExcelScript.PresetCriteriaConditionalFormat`para obtener más información.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPreset(): PresetCriteriaConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.PresetCriteriaConditionalFormat:interface" /> | undefined
      description: ''
- name: getPriority()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getPriority:member(1)
  package: ExcelScript!
  fullName: getPriority()
  summary: Prioridad (o índice) dentro de la colección de formato condicional en la que existe actualmente este formato condicional. Cambiar esto también cambia las prioridades de otros formatos condicionales, para permitir un orden de prioridad contiguo. Use una prioridad negativa para comenzar desde atrás. Las prioridades mayores que los límites se obtienen y establecen en la prioridad máxima (o mínima si es negativa). Tenga en cuenta también que si cambia la prioridad, tendrá que volver a capturar una nueva copia del objeto en esa nueva ubicación de prioridad si desea realizar más cambios en él.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getPriority(): number;'
    return:
      type: number
      description: ''
- name: getRange()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getRange:member(1)
  package: ExcelScript!
  fullName: getRange()
  summary: Devuelve el intervalo al que se aplica el formato condicional. Si el formato condicional se aplica a varios intervalos, este método devuelve `undefined`<!-- -->.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRange(): Range;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.Range:interface" />
      description: ''
- name: getRanges()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getRanges:member(1)
  package: ExcelScript!
  fullName: getRanges()
  summary: Devuelve el valor `RangeAreas`<!-- -->, que comprende uno o varios intervalos rectangulares, a los que se aplica el formato condicional.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getRanges(): RangeAreas;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.RangeAreas:interface" />
      description: ''
- name: getStopIfTrue()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getStopIfTrue:member(1)
  package: ExcelScript!
  fullName: getStopIfTrue()
  summary: Si se cumplen las condiciones de este formato condicional, los formatos de menor prioridad no surtirán efecto en esa celda. El valor está `null` en las barras de datos, los conjuntos de iconos y las escalas de colores, ya que no hay ningún concepto de `StopIfTrue` para ellas.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getStopIfTrue(): boolean;'
    return:
      type: boolean
      description: ''
- name: getTextComparison()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getTextComparison:member(1)
  package: ExcelScript!
  fullName: getTextComparison()
  summary: Devuelve las propiedades de formato condicional de texto específicas si el formato condicional actual es un tipo de texto. Por ejemplo, para dar formato a celdas que coincidan con la palabra "Texto".
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTextComparison(): TextConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TextConditionalFormat:interface" /> | undefined
      description: "\n\n#### <a name=\"examples\"></a>Ejemplos\n\n```TypeScript\n/**\n * This script adds conditional formatting to the first column in the worksheet.\n * This formatting gives the cells a green fill if they have text starting with \"Excel\".\n */\nfunction main(workbook: ExcelScript.Workbook) {\n  // Get the first column in the current worksheet.\n  const currentSheet = workbook.getActiveWorksheet();\n  const firstColumn = currentSheet.getRange(\"A:A\");\n\n  // Add conditional formatting based on the text in the cells.\n  const textConditionFormat = \n    firstColumn.addConditionalFormat(ExcelScript.ConditionalFormatType.containsText).getTextComparison();\n\n  // Set the conditional format to provide a green fill.\n  textConditionFormat.getFormat().getFill().setColor(\"green\");\n\n  // Apply the condition rule that the text begins with \"Excel\".\n  const textRule: ExcelScript.ConditionalTextComparisonRule = {\n    operator: ExcelScript.ConditionalTextOperator.beginsWith,\n    text: \"Excel\"\n  };\n  textConditionFormat.setRule(textRule);\n}\n```"
- name: getTopBottom()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getTopBottom:member(1)
  package: ExcelScript!
  fullName: getTopBottom()
  summary: Devuelve las propiedades de formato condicional superior e inferior si el formato condicional actual es un `TopBottom` tipo. Por ejemplo, para dar formato al 10 % superior o inferior 10 elementos.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getTopBottom(): TopBottomConditionalFormat | undefined;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.TopBottomConditionalFormat:interface" /> | undefined
      description: ''
- name: getType()
  uid: ExcelScript!ExcelScript.ConditionalFormat#getType:member(1)
  package: ExcelScript!
  fullName: getType()
  summary: Tipo de formato condicional. Solo se puede establecer uno a la vez.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'getType(): ConditionalFormatType;'
    return:
      type: <xref uid="ExcelScript!ExcelScript.ConditionalFormatType:enum" />
      description: ''
- name: setPriority(priority)
  uid: ExcelScript!ExcelScript.ConditionalFormat#setPriority:member(1)
  package: ExcelScript!
  fullName: setPriority(priority)
  summary: Prioridad (o índice) dentro de la colección de formato condicional en la que existe actualmente este formato condicional. Cambiar esto también cambia las prioridades de otros formatos condicionales, para permitir un orden de prioridad contiguo. Use una prioridad negativa para comenzar desde atrás. Las prioridades mayores que los límites se obtienen y establecen en la prioridad máxima (o mínima si es negativa). Tenga en cuenta también que si cambia la prioridad, tendrá que volver a capturar una nueva copia del objeto en esa nueva ubicación de prioridad si desea realizar más cambios en él.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setPriority(priority: number): void;'
    parameters:
    - id: priority
      description: ''
      type: number
    return:
      type: void
      description: ''
- name: setStopIfTrue(stopIfTrue)
  uid: ExcelScript!ExcelScript.ConditionalFormat#setStopIfTrue:member(1)
  package: ExcelScript!
  fullName: setStopIfTrue(stopIfTrue)
  summary: Si se cumplen las condiciones de este formato condicional, los formatos de menor prioridad no surtirán efecto en esa celda. El valor está `null` en las barras de datos, los conjuntos de iconos y las escalas de colores, ya que no hay ningún concepto de `StopIfTrue` para ellas.
  remarks: ''
  isPreview: false
  isDeprecated: false
  syntax:
    content: 'setStopIfTrue(stopIfTrue: boolean): void;'
    parameters:
    - id: stopIfTrue
      description: ''
      type: boolean
    return:
      type: void
      description: ''
metadata:
  ms.openlocfilehash: 7c9b7f9b1fb7350f3fb52bdd04d0bdef985cd8b1
  ms.sourcegitcommit: e4d007e5b8fa836727fe0419950ff22d5edc2384
  ms.translationtype: MT
  ms.contentlocale: es-ES
  ms.lasthandoff: 08/24/2022
  ms.locfileid: "67423900"
