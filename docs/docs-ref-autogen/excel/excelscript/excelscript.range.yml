### YamlMime:UniversalReference
items:
  - uid: 'ExcelScript!ExcelScript.Range:interface'
    summary: 'Range representa un conjunto de una o más celdas contiguas, como una celda, una fila, una columna, un bloque de celdas, etc. Para obtener más información sobre cómo se usan los rangos en la API, vea [trabajar con rangos mediante la API de JavaScript de Excel](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges) y [trabajar con rangos mediante la API de JavaScript de Excel (avanzado)](https://docs.microsoft.com/office/dev/add-ins/excel/excel-add-ins-ranges-advanced) .<!-- -->.'
    name: ExcelScript.Range
    fullName: ExcelScript.Range
    langs:
      - typeScript
    type: interface
    package: ExcelScript!
    children:
      - 'ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#autoFill:member(1)'
      - 'ExcelScript!ExcelScript.Range#calculate:member(1)'
      - 'ExcelScript!ExcelScript.Range#clear:member(1)'
      - 'ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)'
      - 'ExcelScript!ExcelScript.Range#convertToLinkedDataType:member(1)'
      - 'ExcelScript!ExcelScript.Range#copyFrom:member(1)'
      - 'ExcelScript!ExcelScript.Range#delete:member(1)'
      - 'ExcelScript!ExcelScript.Range#find:member(1)'
      - 'ExcelScript!ExcelScript.Range#flashFill:member(1)'
      - 'ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getAddress:member(1)'
      - 'ExcelScript!ExcelScript.Range#getAddressLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getBoundingRect:member(1)'
      - 'ExcelScript!ExcelScript.Range#getCell:member(1)'
      - 'ExcelScript!ExcelScript.Range#getCellCount:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnCount:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnIndex:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)'
      - 'ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)'
      - 'ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#getDataValidation:member(1)'
      - 'ExcelScript!ExcelScript.Range#getEntireColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getEntireRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormula:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulas:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHeight:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#getHyperlink:member(1)'
      - 'ExcelScript!ExcelScript.Range#getImage:member(1)'
      - 'ExcelScript!ExcelScript.Range#getIntersection:member(1)'
      - 'ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLastCell:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLastColumn:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLastRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLeft:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)'
      - 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#getOffsetRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getPivotTables:member(1)'
      - 'ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)'
      - 'ExcelScript!ExcelScript.Range#getResizedRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowCount:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowIndex:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowsAbove:member(1)'
      - 'ExcelScript!ExcelScript.Range#getRowsBelow:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSort:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSpecialCells:member(1)'
      - 'ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)'
      - 'ExcelScript!ExcelScript.Range#getTables:member(1)'
      - 'ExcelScript!ExcelScript.Range#getText:member(1)'
      - 'ExcelScript!ExcelScript.Range#getTexts:member(1)'
      - 'ExcelScript!ExcelScript.Range#getTop:member(1)'
      - 'ExcelScript!ExcelScript.Range#getUsedRange:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValue:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValues:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValueType:member(1)'
      - 'ExcelScript!ExcelScript.Range#getValueTypes:member(1)'
      - 'ExcelScript!ExcelScript.Range#getVisibleView:member(1)'
      - 'ExcelScript!ExcelScript.Range#getWidth:member(1)'
      - 'ExcelScript!ExcelScript.Range#getWorksheet:member(1)'
      - 'ExcelScript!ExcelScript.Range#group:member(1)'
      - 'ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)'
      - 'ExcelScript!ExcelScript.Range#insert:member(1)'
      - 'ExcelScript!ExcelScript.Range#merge:member(1)'
      - 'ExcelScript!ExcelScript.Range#moveTo:member(1)'
      - 'ExcelScript!ExcelScript.Range#removeDuplicates:member(1)'
      - 'ExcelScript!ExcelScript.Range#replaceAll:member(1)'
      - 'ExcelScript!ExcelScript.Range#select:member(1)'
      - 'ExcelScript!ExcelScript.Range#setColumnHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#setDirty:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormula:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulas:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)'
      - 'ExcelScript!ExcelScript.Range#setHyperlink:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormat:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormats:member(1)'
      - 'ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)'
      - 'ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)'
      - 'ExcelScript!ExcelScript.Range#setRowHidden:member(1)'
      - 'ExcelScript!ExcelScript.Range#setValue:member(1)'
      - 'ExcelScript!ExcelScript.Range#setValues:member(1)'
      - 'ExcelScript!ExcelScript.Range#showCard:member(1)'
      - 'ExcelScript!ExcelScript.Range#showGroupDetails:member(1)'
      - 'ExcelScript!ExcelScript.Range#ungroup:member(1)'
      - 'ExcelScript!ExcelScript.Range#unmerge:member(1)'
  - uid: 'ExcelScript!ExcelScript.Range#addConditionalFormat:member(1)'
    summary: Agrega un nuevo formato condicional a la colección en la primera o máxima prioridad.
    name: addConditionalFormat(type)
    fullName: addConditionalFormat(type)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addConditionalFormat(type: ConditionalFormatType): ConditionalFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          /**
           * This sample applies conditional formatting to the currently used range in the worksheet. 
           * The conditional formatting is a green fill for the top 10% of values.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the used range in the worksheet.
            let range = selectedSheet.getUsedRange();

            // Set the fill color to green for the top 10% of values in the range.
            let conditionalFormat = range.addConditionalFormat(ExcelScript.ConditionalFormatType.topBottom)
            conditionalFormat.getTopBottom().getFormat().getFill().setColor("green");
            conditionalFormat.getTopBottom().setRule({
              rank: 10, // The percentage threshold.
              type: ExcelScript.ConditionalTopBottomCriterionType.topPercent // The type of the top/bottom condition.
            });
          }
          ```
      parameters:
        - id: type
          description: Tipo de formato condicional que se va a agregar. Consulte Excel. ConditionalFormatType para obtener información detallada.
          type:
            - 'ExcelScript!ExcelScript.ConditionalFormatType:enum'
  - uid: 'ExcelScript!ExcelScript.Range#autoFill:member(1)'
    summary: |-
      Rellena el intervalo actual con el rango de destino utilizando la lógica de Autorrelleno especificada. El rango de destino puede ser null o puede extender el código fuente tanto horizontal como verticalmente. No se admiten rangos discontinuos.

      Para obtener más información, lea [usar Autorrellenar y relleno rápido](https://support.office.com/article/video-use-autofill-and-flash-fill-2e79a709-c814-4b27-8bc2-c4dc84d49464)<!-- -->.
    name: 'autoFill(destinationRange, autoFillType)'
    fullName: 'autoFill(destinationRange, autoFillType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        autoFill(
                    destinationRange?: Range | string,
                    autoFillType?: AutoFillType
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: 'Intervalo de destino que se va a rellenar. Si el rango de destino es null, los datos se rellenan en función de las celdas circundantes (que es el comportamiento al hacer doble clic en el controlador de relleno de intervalo de la interfaz de usuario).'
          type:
            - 'ExcelScript!ExcelScript.Range#autoFill~0:complex'
        - id: autoFillType
          description: 'El tipo de Autorrellenar. Especifica cómo se debe rellenar el rango de destino, en función del contenido del intervalo actual. El valor predeterminado es "FillDefault".'
          type:
            - 'ExcelScript!ExcelScript.AutoFillType:enum'
  - uid: 'ExcelScript!ExcelScript.Range#calculate:member(1)'
    summary: Calcula un rango de celdas en una hoja de cálculo.
    name: calculate()
    fullName: calculate()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'calculate(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#clear:member(1)'
    summary: 'Borra valores de rango, formato, relleno, borde, etc.'
    name: clear(applyTo)
    fullName: clear(applyTo)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clear(applyTo?: ClearApplyTo): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: applyTo
          description: Opcional. Determina el tipo de acción de borrado. Consulte Excel. ClearApplyTo para obtener información detallada.
          type:
            - 'ExcelScript!ExcelScript.ClearApplyTo:enum'
  - uid: 'ExcelScript!ExcelScript.Range#clearAllConditionalFormats:member(1)'
    summary: Borra todos los formatos condicionales activos en el intervalo actual especificado.
    name: clearAllConditionalFormats()
    fullName: clearAllConditionalFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAllConditionalFormats(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#convertDataTypeToText:member(1)'
    summary: Convierte el intervalo de celdas con tipos de datos en texto.
    name: convertDataTypeToText()
    fullName: convertDataTypeToText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'convertDataTypeToText(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#convertToLinkedDataType:member(1)'
    summary: Convierte el intervalo de celdas en un tipo de datos vinculado en la hoja de cálculo.
    name: 'convertToLinkedDataType(serviceID, languageCulture)'
    fullName: 'convertToLinkedDataType(serviceID, languageCulture)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        convertToLinkedDataType(
                    serviceID: number,
                    languageCulture: string
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: serviceID
          description: IDENTIFICADOR del servicio que se usará para consultar los datos.
          type:
            - number
        - id: languageCulture
          description: Referencia cultural del idioma en el que se va a consultar el servicio.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#copyFrom:member(1)'
    summary: Copia el formato o los datos de la celda del intervalo de origen o RangeAreas al intervalo actual. El rango de destino puede tener un tamaño diferente al del rango de origen o RangeAreas. El destino se expandirá automáticamente si es menor que el origen.
    name: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    fullName: 'copyFrom(sourceRange, copyType, skipBlanks, transpose)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        copyFrom(
                    sourceRange: Range | RangeAreas | string,
                    copyType?: RangeCopyType,
                    skipBlanks?: boolean,
                    transpose?: boolean
                ): void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: sourceRange
          description: 'El rango de origen o RangeAreas desde el que se va a copiar. Cuando la RangeAreas de origen tiene varios intervalos, su formulario debe poder crearse quitando filas o columnas completas de un rango rectangular.'
          type:
            - 'ExcelScript!ExcelScript.Range#copyFrom~0:complex'
        - id: copyType
          description: Tipo de datos de celda o formato que se va a copiar. El valor predeterminado es "All".
          type:
            - 'ExcelScript!ExcelScript.RangeCopyType:enum'
        - id: skipBlanks
          description: True si se omiten las celdas en blanco en el rango de origen. El valor predeterminado es false.
          type:
            - boolean
        - id: transpose
          description: True si se van a transponer las celdas en el rango de destino. El valor predeterminado es false.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#delete:member(1)'
    summary: Elimina las celdas asociadas al rango.
    name: delete(shift)
    fullName: delete(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'delete(shift: DeleteShiftDirection): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: shift
          description: Especifica hacia dónde se desplazarán las celdas. Consulte Excel. DeleteShiftDirection para obtener información detallada.
          type:
            - 'ExcelScript!ExcelScript.DeleteShiftDirection:enum'
  - uid: 'ExcelScript!ExcelScript.Range#find:member(1)'
    summary: 'Busca la cadena especificada, según los criterios especificados. Si el rango actual es mayor que una sola celda, la búsqueda se limitará a ese intervalo; de lo contrario, la búsqueda cubrirá toda la hoja a partir de esa celda. Si no hay coincidencias, esta función devolverá un objeto null.'
    name: 'find(text, criteria)'
    fullName: 'find(text, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'find(text: string, criteria: SearchCriteria): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: text
          description: Cadena que se va a buscar.
          type:
            - string
        - id: criteria
          description: 'Criterios de búsqueda adicionales, incluida la dirección de la búsqueda y si la búsqueda debe coincidir con toda la celda o distinguir mayúsculas de minúsculas.'
          type:
            - 'ExcelScript!ExcelScript.SearchCriteria:interface'
  - uid: 'ExcelScript!ExcelScript.Range#flashFill:member(1)'
    summary: 'Aplica el relleno rápido en el rango actual. Relleno rápido rellena automáticamente los datos cuando detecta un patrón, por lo que el rango debe ser de una única columna y tener datos en los laterales para obtener el patrón.'
    name: flashFill()
    fullName: flashFill()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'flashFill(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getAbsoluteResizedRange:member(1)'
    summary: 'Obtiene un objeto Range con la misma celda superior izquierda que el objeto Range actual, pero con los números de filas y columnas especificados.'
    name: 'getAbsoluteResizedRange(numRows, numColumns)'
    fullName: 'getAbsoluteResizedRange(numRows, numColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAbsoluteResizedRange(numRows: number, numColumns: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: numRows
          description: El número de filas del nuevo tamaño del intervalo.
          type:
            - number
        - id: numColumns
          description: El número de columnas del nuevo tamaño de intervalo.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getAddress:member(1)'
    summary: 'Especifica la referencia del rango en estilo a1. El valor de dirección contendrá la referencia de la hoja (por ejemplo, "Hoja1! A1: B4 ").'
    name: getAddress()
    fullName: getAddress()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAddress(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getAddressLocal:member(1)'
    summary: Especifica la referencia del rango para el rango especificado en el idioma del usuario.
    name: getAddressLocal()
    fullName: getAddressLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getAddressLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getBoundingRect:member(1)'
    summary: 'Obtiene el objeto de intervalo más pequeño que abarca los intervalos especificados. Por ejemplo, el valor GetBoundingRect de "B2:C5" y "D10:E15" es "B2:E15".'
    name: getBoundingRect(anotherRange)
    fullName: getBoundingRect(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getBoundingRect(anotherRange: Range | string): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: Objeto o dirección de intervalo o nombre de intervalo.
          type:
            - 'ExcelScript!ExcelScript.Range#getBoundingRect~0:complex'
  - uid: 'ExcelScript!ExcelScript.Range#getCell:member(1)'
    summary: 'Obtiene el objeto de intervalo que contiene la celda en función de los números de fila y columna. La celda puede estar fuera de los límites de su rango primario, siempre y cuando se mantenga dentro de la cuadrícula de la hoja de cálculo. La celda devuelta se ubica con respecto a la celda superior izquierda del intervalo.'
    name: 'getCell(row, column)'
    fullName: 'getCell(row, column)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCell(row: number, column: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: row
          description: Número de fila de la celda que se va a recuperar. Indizado con cero.
          type:
            - number
        - id: column
          description: Número de columna de la celda que se va a recuperar. Indizado con cero.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getCellCount:member(1)'
    summary: Especifica el número de celdas del rango. Esta API devolverá -1 si el recuento de celdas supera 2^31-1 (2 147 483 647).
    name: getCellCount()
    fullName: getCellCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getCellCount(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getColumn:member(1)'
    summary: Obtiene una columna contenida en el intervalo.
    name: getColumn(column)
    fullName: getColumn(column)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumn(column: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: column
          description: Número de columna del intervalo que se va a recuperar. Indizado con cero.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getColumnCount:member(1)'
    summary: Especifica el número total de columnas del rango.
    name: getColumnCount()
    fullName: getColumnCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnCount(): number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getColumnHidden:member(1)'
    summary: Representa si todas las columnas del rango actual están ocultas.
    name: getColumnHidden()
    fullName: getColumnHidden()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnHidden(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getColumnIndex:member(1)'
    summary: Especifica el número de columna de la primera celda del rango. Indizado con cero.
    name: getColumnIndex()
    fullName: getColumnIndex()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnIndex(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getColumnsAfter:member(1)'
    summary: Obtiene un número determinado de columnas a la derecha del objeto Range actual.
    name: getColumnsAfter(count)
    fullName: getColumnsAfter(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsAfter(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getColumnsBefore:member(1)'
    summary: Obtiene un número determinado de columnas a la izquierda del objeto Range actual.
    name: getColumnsBefore(count)
    fullName: getColumnsBefore(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getColumnsBefore(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of columns to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getConditionalFormat:member(1)'
    summary: Devuelve un formato condicional para el identificador especificado.
    name: getConditionalFormat(id)
    fullName: getConditionalFormat(id)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getConditionalFormat(id: string): ConditionalFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        description: ''
      parameters:
        - id: id
          description: Identificador del formato condicional.
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#getConditionalFormats:member(1)'
    summary: La colección de ConditionalFormats que intersecta el rango.
    name: getConditionalFormats()
    fullName: getConditionalFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getConditionalFormats(): ConditionalFormat[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getConditionalFormats~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getDataValidation:member(1)'
    summary: Devuelve un objeto de validación de datos.
    name: getDataValidation()
    fullName: getDataValidation()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getDataValidation(): DataValidation;'
      return:
        type:
          - 'ExcelScript!ExcelScript.DataValidation:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getEntireColumn:member(1)'
    summary: 'Obtiene un objeto que representa toda la columna del rango (por ejemplo, si el rango actual representa las celdas "B4: E11", `getEntireColumn` es un rango que representa las columnas "B:E").'
    name: getEntireColumn()
    fullName: getEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireColumn(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getEntireRow:member(1)'
    summary: 'Obtiene un objeto que representa toda la fila del rango (por ejemplo, si el rango actual representa las celdas "B4: E11", `GetEntireRow` es un rango que representa las filas "4:11").'
    name: getEntireRow()
    fullName: getEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getEntireRow(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormat:member(1)'
    summary: 'Devuelve un objeto de formato que encapsula la fuente, el relleno, los bordes, la alineación y otras propiedades del rango.'
    name: getFormat()
    fullName: getFormat()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormat(): RangeFormat;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeFormat:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormula:member(1)'
    summary: 'Representa la fórmula de celda en notación de estilo a1. Si el rango contiene varias celdas, se devolverán los datos de la primera celda (representada por el índice de fila de 0 y el índice de columna 0).'
    name: getFormula()
    fullName: getFormula()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormula(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulaLocal:member(1)'
    summary: 'Representa la fórmula de celda en notación de estilo a1, en la configuración regional de idioma y formato numérico del usuario. Por ejemplo, la fórmula "=SUM(A1, 1.5)" en inglés se convertiría en "=SUMME(A1; 1,5)" en alemán. Si el rango contiene varias celdas, se devolverán los datos de la primera celda (representada por el índice de fila de 0 y el índice de columna 0).'
    name: getFormulaLocal()
    fullName: getFormulaLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulaLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulaR1C1:member(1)'
    summary: 'Representa la fórmula de la celda en la notación de estilo F1C1. Si el rango contiene varias celdas, se devolverán los datos de la primera celda (representada por el índice de fila de 0 y el índice de columna 0).'
    name: getFormulaR1C1()
    fullName: getFormulaR1C1()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulaR1C1(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulas:member(1)'
    summary: Representa la fórmula en notación de estilo A1.
    name: getFormulas()
    fullName: getFormulas()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulas(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulasLocal:member(1)'
    summary: 'Represents the formula in A1-style notation, in the user''s language and number-formatting locale. For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.'
    name: getFormulasLocal()
    fullName: getFormulasLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulasLocal(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getFormulasR1C1:member(1)'
    summary: Representa la fórmula en notación de estilo R1C1.
    name: getFormulasR1C1()
    fullName: getFormulasR1C1()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getFormulasR1C1(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHeight:member(1)'
    summary: 'Devuelve la distancia en puntos, con un zoom del 100%, desde el borde superior del rango hasta el borde inferior del mismo.'
    name: getHeight()
    fullName: getHeight()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHeight(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHidden:member(1)'
    summary: Representa si todas las celdas del rango actual están ocultas.
    name: getHidden()
    fullName: getHidden()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHidden(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getHyperlink:member(1)'
    summary: Representa el hipervínculo para el intervalo actual.
    name: getHyperlink()
    fullName: getHyperlink()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getHyperlink(): RangeHyperlink;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeHyperlink:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getImage:member(1)'
    summary: Representa el intervalo como una imagen PNG codificada en Base64.
    name: getImage()
    fullName: getImage()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getImage(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getIntersection:member(1)'
    summary: 'Obtiene el objeto de intervalo que representa la intersección rectangular de los intervalos especificados. Si no se encuentra ninguna intersección, se devolverá un objeto NULL.'
    name: getIntersection(anotherRange)
    fullName: getIntersection(anotherRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIntersection(anotherRange: Range | string): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: anotherRange
          description: Objeto de intervalo o dirección de intervalo que se usará para determinar la intersección de los intervalos.
          type:
            - 'ExcelScript!ExcelScript.Range#getIntersection~0:complex'
  - uid: 'ExcelScript!ExcelScript.Range#getIsEntireColumn:member(1)'
    summary: Representa si el intervalo actual es una columna completa.
    name: getIsEntireColumn()
    fullName: getIsEntireColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsEntireColumn(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getIsEntireRow:member(1)'
    summary: Representa si el intervalo actual es una fila completa.
    name: getIsEntireRow()
    fullName: getIsEntireRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getIsEntireRow(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLastCell:member(1)'
    summary: 'Obtiene la última celda del intervalo. Por ejemplo, la última celda de "B2:D5" es "D5".'
    name: getLastCell()
    fullName: getLastCell()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastCell(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLastColumn:member(1)'
    summary: 'Obtiene la última columna del intervalo. Por ejemplo, la última columna de "B2:D5" es "D2:D5".'
    name: getLastColumn()
    fullName: getLastColumn()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastColumn(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLastRow:member(1)'
    summary: 'Obtiene la última fila del intervalo. Por ejemplo, la última fila de "B2:D5" es "B5:D5".'
    name: getLastRow()
    fullName: getLastRow()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLastRow(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLeft:member(1)'
    summary: 'Devuelve la distancia en puntos, con un zoom del 100%, desde el borde izquierdo de la hoja de cálculo hasta el borde izquierdo del rango.'
    name: getLeft()
    fullName: getLeft()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLeft(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeState:member(1)'
    summary: Representa el estado de tipo de datos de la celda.
    name: getLinkedDataTypeState()
    fullName: getLinkedDataTypeState()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLinkedDataTypeState(): LinkedDataTypeState;'
      return:
        type:
          - 'ExcelScript!ExcelScript.LinkedDataTypeState:enum'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates:member(1)'
    summary: Indica el estado del tipo de datos de cada celda.
    name: getLinkedDataTypeStates()
    fullName: getLinkedDataTypeStates()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getLinkedDataTypeStates(): LinkedDataTypeState[][];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormat:member(1)'
    summary: 'Representa el código de formato de número de Excel de la celda para el intervalo especificado. Si el rango contiene varias celdas, se devolverán los datos de la primera celda (representada por el índice de fila de 0 y el índice de columna 0).'
    name: getNumberFormat()
    fullName: getNumberFormat()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormat(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormatLocal:member(1)'
    summary: 'Representa el código de formato de número de Excel de la celda para el intervalo determinado, en función de la configuración de idioma del usuario. Excel no realiza ninguna coerción de idioma o formato al obtener o establecer la `numberFormatLocal` propiedad. Cualquier texto devuelto utiliza las cadenas con formato local según el idioma especificado en la configuración del sistema. Si el rango contiene varias celdas, se devolverán los datos de la primera celda (representada por el índice de fila de 0 y el índice de columna 0).'
    name: getNumberFormatLocal()
    fullName: getNumberFormatLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormatLocal(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormats:member(1)'
    summary: Representa el código de formato numérico de Excel para el intervalo especificado.
    name: getNumberFormats()
    fullName: getNumberFormats()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormats(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getNumberFormatsLocal:member(1)'
    summary: 'Representa el código de formato numérico de Excel para el intervalo determinado, en función de la configuración de idioma del usuario. Excel no realiza ninguna coerción de idioma o formato al obtener o establecer la `numberFormatLocal` propiedad. Cualquier texto devuelto utiliza las cadenas con formato local según el idioma especificado en la configuración del sistema.'
    name: getNumberFormatsLocal()
    fullName: getNumberFormatsLocal()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getNumberFormatsLocal(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getOffsetRange:member(1)'
    summary: 'Gets an object which represents a range that''s offset from the specified range. The dimension of the returned range will match this range. If the resulting range is forced outside the bounds of the worksheet grid, an error will be thrown.'
    name: 'getOffsetRange(rowOffset, columnOffset)'
    fullName: 'getOffsetRange(rowOffset, columnOffset)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getOffsetRange(rowOffset: number, columnOffset: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          /**
           * This script gets adjacent cells using relative references.
           * Note that if the active cell is on the top row, part of the script fails, 
           * because it references the cell above the currently selected one.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the currently active cell in the workbook.
            let activeCell = workbook.getActiveCell();
            console.log(`The active cell's address is: ${activeCell.getAddress()}`);

            // Get the cell to the right of the active cell and set its value and color.
            let rightCell = activeCell.getOffsetRange(0,1);
            rightCell.setValue("Right cell");
            console.log(`The right cell's address is: ${rightCell.getAddress()}`);
            rightCell.getFormat().getFont().setColor("Magenta");
            rightCell.getFormat().getFill().setColor("Cyan");

            // Get the cell to the above of the active cell and set its value and color.
            // Note that this operation will fail if the active cell is in the top row.
            let aboveCell = activeCell.getOffsetRange(-1, 0);
            aboveCell.setValue("Above cell");
            console.log(`The above cell's address is: ${aboveCell.getAddress()}`);
            aboveCell.getFormat().getFont().setColor("White");
            aboveCell.getFormat().getFill().setColor("Black");
          }
          ```
      parameters:
        - id: rowOffset
          description: 'The number of rows (positive, negative, or 0) by which the range is to be offset. Positive values are offset downward, and negative values are offset upward.'
          type:
            - number
        - id: columnOffset
          description: 'The number of columns (positive, negative, or 0) by which the range is to be offset. Positive values are offset to the right, and negative values are offset to the left.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getPivotTables:member(1)'
    summary: Obtiene una colección con ámbito de tablas dinámicas superpuestas con el intervalo.
    name: getPivotTables(fullyContained)
    fullName: getPivotTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPivotTables(fullyContained?: boolean): PivotTable[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getPivotTables~0:complex'
        description: ''
      parameters:
        - id: fullyContained
          description: 'Si es true, devuelve sólo las tablas dinámicas que están completamente contenidas dentro de los límites del rango. El valor predeterminado es False.'
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#getPredefinedCellStyle:member(1)'
    summary: 'Representa el estilo del rango actual. Si los estilos de las celdas son incoherentes, se devolverá null. Para los estilos personalizados, se devolverá el nombre del estilo. Para los estilos integrados, se devolverá una cadena que representa un valor en la enumeración BuiltInStyle.'
    name: getPredefinedCellStyle()
    fullName: getPredefinedCellStyle()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getPredefinedCellStyle(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getResizedRange:member(1)'
    summary: 'Obtiene un objeto Range similar al objeto Range actual, pero con su esquina inferior derecha expandida (o contraída) mediante un número de filas y columnas.'
    name: 'getResizedRange(deltaRows, deltaColumns)'
    fullName: 'getResizedRange(deltaRows, deltaColumns)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getResizedRange(deltaRows: number, deltaColumns: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          /**
           * This script copies the formatting in the active cell to the neighboring cells.
           * Note that this script only works when the active cell isn't on an edge of the worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the active cell.
            let activeCell = workbook.getActiveCell();

            // Get the cell that's one row above and one column to the left of the active cell.
            let cornerCell = activeCell.getOffsetRange(-1,-1);

            // Get a range that includes all the cells surrounding the active cell.
            let surroundingRange = cornerCell.getResizedRange(2, 2)

            // Copy the formatting from the active cell to the new range.
            surroundingRange.copyFrom(
              activeCell, /* The source range. */
              ExcelScript.RangeCopyType.formats /* What to copy. */
              );
          }
          ```
      parameters:
        - id: deltaRows
          description: 'The number of rows by which to expand the bottom-right corner, relative to the current range. Use a positive number to expand the range, or a negative number to decrease it.'
          type:
            - number
        - id: deltaColumns
          description: 'Número de columnas que se va a expandir la esquina inferior derecha con respecto al intervalo actual. Use un número positivo para expandir el intervalo, o un número negativo para reducirlo.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getRow:member(1)'
    summary: Obtiene una fila contenida en el intervalo.
    name: getRow(row)
    fullName: getRow(row)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRow(row: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: row
          description: Número de fila del intervalo que se va a recuperar. Indizado con cero.
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getRowCount:member(1)'
    summary: Devuelve el número total de filas del intervalo.
    name: getRowCount()
    fullName: getRowCount()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowCount(): number;'
      return:
        type:
          - number
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          /**
           * This sample provides the count of negative numbers that are present
           * in the used range of the current worksheet.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the working range.
            let usedRange = workbook.getActiveWorksheet().getUsedRange();
            let rowCount = usedRange.getRowCount();
            let columnCount = usedRange.getColumnCount();

            // Save the values locally to avoid repeatedly asking the workbook.
            let usedRangeValues = usedRange.getValues();

            // Start the negative number counter.
            let negativeCount = 0;

            // Iterate over the entire range looking for negative numbers.
            for (let i = 0; i < rowCount; i++) {
              for (let j = 0; j < columnCount; j++) {
                if (usedRangeValues[i][j] < 0) {
                  negativeCount++;
                }
              }
            }

            // Log the negative number count to the console.
            console.log(negativeCount);
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getRowHidden:member(1)'
    summary: Representa si todas las filas del rango actual están ocultas.
    name: getRowHidden()
    fullName: getRowHidden()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowHidden(): boolean;'
      return:
        type:
          - boolean
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getRowIndex:member(1)'
    summary: Devuelve el número de fila de la primera celda del intervalo. Indizado con cero.
    name: getRowIndex()
    fullName: getRowIndex()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowIndex(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getRowsAbove:member(1)'
    summary: Obtiene un número determinado de filas encima del objeto Range actual.
    name: getRowsAbove(count)
    fullName: getRowsAbove(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsAbove(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getRowsBelow:member(1)'
    summary: Obtiene un número determinado de filas debajo del objeto Range actual.
    name: getRowsBelow(count)
    fullName: getRowsBelow(count)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getRowsBelow(count?: number): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: count
          description: 'Optional. The number of rows to include in the resulting range. In general, use a positive number to create a range outside the current range. You can also use a negative number to create a range within the current range. The default value is 1.'
          type:
            - number
  - uid: 'ExcelScript!ExcelScript.Range#getSort:member(1)'
    summary: Representa la ordenación del intervalo del intervalo actual.
    name: getSort()
    fullName: getSort()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSort(): RangeSort;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeSort:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getSpecialCells:member(1)'
    summary: 'Obtiene el objeto RangeAreas, que incluye uno o más intervalos y representa todas las celdas que coinciden con el tipo y valor especificados. Si no se encuentra ninguna celda especial, se devolverá un objeto null.'
    name: 'getSpecialCells(cellType, cellValueType)'
    fullName: 'getSpecialCells(cellType, cellValueType)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        getSpecialCells(
                    cellType: SpecialCellType,
                    cellValueType?: SpecialCellValueType
                ): RangeAreas;
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeAreas:interface'
        description: ''
      parameters:
        - id: cellType
          description: Tipo de las celdas que se van a incluir.
          type:
            - 'ExcelScript!ExcelScript.SpecialCellType:enum'
        - id: cellValueType
          description: 'Si el argumento cellType es constante o fórmulas, este argumento se usa para determinar los tipos de celdas que se van a incluir en el resultado. Estos valores se pueden combinar para que devuelvan más de un tipo. El valor predeterminado es seleccionar todas las constantes o fórmulas, sea cual sea el tipo.'
          type:
            - 'ExcelScript!ExcelScript.SpecialCellValueType:enum'
  - uid: 'ExcelScript!ExcelScript.Range#getSurroundingRegion:member(1)'
    summary: Devuelve un objeto Range que representa la región circundante para la celda superior izquierda de este intervalo. Una región circundante es un intervalo limitado por cualquier combinación de filas y columnas en blanco en relación a este intervalo.
    name: getSurroundingRegion()
    fullName: getSurroundingRegion()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getSurroundingRegion(): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getTables:member(1)'
    summary: Obtiene una colección con ámbito de tablas que se superpone con el intervalo.
    name: getTables(fullyContained)
    fullName: getTables(fullyContained)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTables(fullyContained?: boolean): Table[];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getTables~0:complex'
        description: ''
      parameters:
        - id: fullyContained
          description: 'Si es true, devuelve solo las tablas que están completamente contenidas dentro de los límites del rango. El valor predeterminado es False.'
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#getText:member(1)'
    summary: 'Representa el valor de texto del intervalo especificado. El valor Text no dependerá del ancho de la celda. La \# sustitución de firma que se produce en la interfaz de usuario de Excel no afecta al valor de texto devuelto por la API. Si el rango contiene varias celdas, se devolverán los datos de la primera celda (representada por el índice de fila de 0 y el índice de columna 0).'
    name: getText()
    fullName: getText()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getText(): string;'
      return:
        type:
          - string
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getTexts:member(1)'
    summary: Valores de texto del rango especificado. El valor Text no dependerá del ancho de la celda. La \# sustitución de firma que se produce en la interfaz de usuario de Excel no afecta al valor de texto devuelto por la API.
    name: getTexts()
    fullName: getTexts()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTexts(): string[][];'
      return:
        type:
          - 'string[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getTop:member(1)'
    summary: 'Devuelve la distancia en puntos, con un zoom del 100%, desde el borde superior de la hoja de cálculo hasta el borde superior del rango.'
    name: getTop()
    fullName: getTop()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getTop(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getUsedRange:member(1)'
    summary: 'Returns the used range of the given range object. If there are no used cells within the range, this function will return a null object.'
    name: getUsedRange(valuesOnly)
    fullName: getUsedRange(valuesOnly)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getUsedRange(valuesOnly?: boolean): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: valuesOnly
          description: Solo tiene en cuenta las celdas con valores como celdas usadas.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#getValue:member(1)'
    summary: 'Representa el valor sin formato del intervalo especificado. Los datos devueltos pueden ser de tipo cadena, número o booleano. La celda que contenga un error devolverá la cadena de error. Si el rango contiene varias celdas, se devolverán los datos de la primera celda (representada por el índice de fila de 0 y el índice de columna 0).'
    name: getValue()
    fullName: getValue()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValue(): any;'
      return:
        type:
          - any
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          /**
           * This sample reads the value of A1 and prints it to the console.
           */
          function main(workbook: ExcelScript.Workbook) {
            // Get the current worksheet.
            let selectedSheet = workbook.getActiveWorksheet();

            // Get the value of cell A1.
            let range = selectedSheet.getRange("A1");
            
            // Print the value of A1.
            console.log(range.getValue());
          }
          ```
  - uid: 'ExcelScript!ExcelScript.Range#getValues:member(1)'
    summary: 'Representa los valores sin formato del rango especificado. Los datos devueltos pueden ser de tipo cadena, número o booleano. Las celdas que contienen un error devolverán la cadena de error.'
    name: getValues()
    fullName: getValues()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValues(): any[][];'
      return:
        type:
          - 'any[][]'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getValueType:member(1)'
    summary: 'Representa el tipo de datos de la celda. Si el rango contiene varias celdas, se devolverán los datos de la primera celda (representada por el índice de fila de 0 y el índice de columna 0).'
    name: getValueType()
    fullName: getValueType()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValueType(): RangeValueType;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeValueType:enum'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getValueTypes:member(1)'
    summary: Especifica el tipo de datos en cada celda.
    name: getValueTypes()
    fullName: getValueTypes()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getValueTypes(): RangeValueType[][];'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range#getValueTypes~0:complex'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getVisibleView:member(1)'
    summary: Representa las filas visibles del intervalo actual.
    name: getVisibleView()
    fullName: getVisibleView()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getVisibleView(): RangeView;'
      return:
        type:
          - 'ExcelScript!ExcelScript.RangeView:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getWidth:member(1)'
    summary: 'Devuelve la distancia en puntos, con un zoom del 100%, desde el borde izquierdo del rango hasta el borde derecho del mismo.'
    name: getWidth()
    fullName: getWidth()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWidth(): number;'
      return:
        type:
          - number
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#getWorksheet:member(1)'
    summary: Hoja de cálculo que contiene el rango actual.
    name: getWorksheet()
    fullName: getWorksheet()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'getWorksheet(): Worksheet;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Worksheet:interface'
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#group:member(1)'
    summary: Agrupa las columnas y las filas de un esquema.
    name: group(groupOption)
    fullName: group(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'group(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: 'Especifica cómo se puede agrupar el intervalo por filas o columnas. `InvalidArgument`Se produce un error si la opción de grupo difiere de la `isEntireRow` propiedad o del rango `isEntireColumn` (es decir, `range.isEntireRow` es true y `groupOption` es "ByColumns", o `range.isEntireColumn` es true y `groupOption` es "ByRows").'
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#hideGroupDetails:member(1)'
    summary: Oculta los detalles del grupo de filas o columnas.
    name: hideGroupDetails(groupOption)
    fullName: hideGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'hideGroupDetails(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Especifica si se ocultan los detalles de las filas agrupadas o de las columnas agrupadas.
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#insert:member(1)'
    summary: 'Inserts a cell or a range of cells into the worksheet in place of this range, and shifts the other cells to make space. Returns a new Range object at the now blank space.'
    name: insert(shift)
    fullName: insert(shift)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'insert(shift: InsertShiftDirection): Range;'
      return:
        type:
          - 'ExcelScript!ExcelScript.Range:interface'
        description: ''
      parameters:
        - id: shift
          description: Especifica hacia dónde se desplazarán las celdas. Consulte Excel. InsertShiftDirection para obtener información detallada.
          type:
            - 'ExcelScript!ExcelScript.InsertShiftDirection:enum'
  - uid: 'ExcelScript!ExcelScript.Range#merge:member(1)'
    summary: Combina las celdas del intervalo en una región de la hoja de cálculo.
    name: merge(across)
    fullName: merge(across)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'merge(across?: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: across
          description: Opcional. Verdadero para que se combinen las celdas de cada fila del rango especificado como celdas combinadas distintas. El valor predeterminado es falso.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#moveTo:member(1)'
    summary: 'Mueve los valores de celda, el formato y las fórmulas del rango actual al rango de destino, reemplazando la información antigua de esas celdas. El rango de destino se expandirá automáticamente si es menor que el intervalo actual. Las celdas del rango de destino que están fuera del área del rango original no cambian.'
    name: moveTo(destinationRange)
    fullName: moveTo(destinationRange)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'moveTo(destinationRange: Range | string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: destinationRange
          description: destinationRange especifica el intervalo al que se moverá la información de este intervalo.
          type:
            - 'ExcelScript!ExcelScript.Range#moveTo~0:complex'
  - uid: 'ExcelScript!ExcelScript.Range#removeDuplicates:member(1)'
    summary: Quita los valores duplicados del intervalo especificado por las columnas.
    name: 'removeDuplicates(columns, includesHeader)'
    fullName: 'removeDuplicates(columns, includesHeader)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        removeDuplicates(
                    columns: number[],
                    includesHeader: boolean
                ): RemoveDuplicatesResult;
      return:
        type:
          - 'ExcelScript!ExcelScript.RemoveDuplicatesResult:interface'
        description: ''
      parameters:
        - id: columns
          description: Las columnas dentro del rango que pueden contener Duplicados. Debe especificarse al menos una columna. Indizado con cero.
          type:
            - 'number[]'
        - id: includesHeader
          description: True si el encabezado contiene datos de entrada. El valor predeterminado es false.
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#replaceAll:member(1)'
    summary: 'Busca y reemplaza la cadena especificada, según los criterios especificados dentro del intervalo actual.'
    name: 'replaceAll(text, replacement, criteria)'
    fullName: 'replaceAll(text, replacement, criteria)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        replaceAll(
                    text: string,
                    replacement: string,
                    criteria: ReplaceCriteria
                ): number;
      return:
        type:
          - number
        description: ''
      parameters:
        - id: text
          description: Cadena que se va a buscar.
          type:
            - string
        - id: replacement
          description: Cadena con la que se va a reemplazar el original.
          type:
            - string
        - id: criteria
          description: Criterios de reemplazo adicionales.
          type:
            - 'ExcelScript!ExcelScript.ReplaceCriteria:interface'
  - uid: 'ExcelScript!ExcelScript.Range#select:member(1)'
    summary: Selecciona el intervalo especificado en la interfaz de usuario de Excel.
    name: select()
    fullName: select()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'select(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#setColumnHidden:member(1)'
    summary: Representa si todas las columnas del rango actual están ocultas.
    name: setColumnHidden(columnHidden)
    fullName: setColumnHidden(columnHidden)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setColumnHidden(columnHidden: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: columnHidden
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#setDirty:member(1)'
    summary: Establece un intervalo que se deberá actualizar cuando se realice la próxima actualización.
    name: setDirty()
    fullName: setDirty()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setDirty(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#setFormula:member(1)'
    summary: 'Establece la fórmula de la celda en notación de estilo a1. Si el rango contiene varias celdas, todas las celdas del rango dado se actualizarán con los datos de entrada.'
    name: setFormula(formula)
    fullName: setFormula(formula)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormula(formula: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formula
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setFormulaLocal:member(1)'
    summary: 'Establezca la fórmula de celda en notación de estilo a1, en la configuración regional de idioma y de formato numérico del usuario. Por ejemplo, la fórmula "=SUM(A1, 1.5)" en inglés se convertiría en "=SUMME(A1; 1,5)" en alemán. Si el rango contiene varias celdas, todas las celdas del rango dado se actualizarán con los datos de entrada.'
    name: setFormulaLocal(formulaLocal)
    fullName: setFormulaLocal(formulaLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulaLocal(formulaLocal: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulaLocal
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setFormulaR1C1:member(1)'
    summary: 'Establece la fórmula de la celda en la notación de estilo F1C1. Si el rango contiene varias celdas, todas las celdas del rango dado se actualizarán con los datos de entrada.'
    name: setFormulaR1C1(formulaR1C1)
    fullName: setFormulaR1C1(formulaR1C1)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulaR1C1(formulaR1C1: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulaR1C1
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setFormulas:member(1)'
    summary: Representa la fórmula en notación de estilo A1.
    name: setFormulas(formulas)
    fullName: setFormulas(formulas)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulas(formulas: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulas
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setFormulasLocal:member(1)'
    summary: 'Represents the formula in A1-style notation, in the user''s language and number-formatting locale. For example, the English "=SUM(A1, 1.5)" formula would become "=SUMME(A1; 1,5)" in German.'
    name: setFormulasLocal(formulasLocal)
    fullName: setFormulasLocal(formulasLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulasLocal(formulasLocal: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulasLocal
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setFormulasR1C1:member(1)'
    summary: Representa la fórmula en notación de estilo R1C1.
    name: setFormulasR1C1(formulasR1C1)
    fullName: setFormulasR1C1(formulasR1C1)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setFormulasR1C1(formulasR1C1: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: formulasR1C1
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setHyperlink:member(1)'
    summary: Representa el hipervínculo para el intervalo actual.
    name: setHyperlink(hyperlink)
    fullName: setHyperlink(hyperlink)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setHyperlink(hyperlink: RangeHyperlink): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: hyperlink
          description: ''
          type:
            - 'ExcelScript!ExcelScript.RangeHyperlink:interface'
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormat:member(1)'
    summary: 'Establece el código de formato de número de Excel de la celda para el intervalo especificado. Si el rango contiene varias celdas, todas las celdas del rango dado se actualizarán con los datos de entrada.'
    name: setNumberFormat(numberFormat)
    fullName: setNumberFormat(numberFormat)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormat(numberFormat: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormat
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormatLocal:member(1)'
    summary: 'Establece el código de formato numérico de Excel de la celda para el intervalo determinado, en función de la configuración de idioma del usuario. Excel no realiza ninguna coerción de idioma o formato al obtener o establecer la `numberFormatLocal` propiedad. Cualquier texto devuelto utiliza las cadenas con formato local según el idioma especificado en la configuración del sistema. Si el rango contiene varias celdas, todas las celdas del rango dado se actualizarán con los datos de entrada.'
    name: setNumberFormatLocal(numberFormatLocal)
    fullName: setNumberFormatLocal(numberFormatLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormatLocal(numberFormatLocal: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormatLocal
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormats:member(1)'
    summary: Representa el código de formato numérico de Excel para el intervalo especificado.
    name: setNumberFormats(numberFormats)
    fullName: setNumberFormats(numberFormats)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormats(numberFormats: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormats
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setNumberFormatsLocal:member(1)'
    summary: 'Representa el código de formato numérico de Excel para el intervalo determinado, en función de la configuración de idioma del usuario. Excel no realiza ninguna coerción de idioma o formato al obtener o establecer la `numberFormatLocal` propiedad. Cualquier texto devuelto utiliza las cadenas con formato local según el idioma especificado en la configuración del sistema.'
    name: setNumberFormatsLocal(numberFormatsLocal)
    fullName: setNumberFormatsLocal(numberFormatsLocal)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setNumberFormatsLocal(numberFormatsLocal: string[][]): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: numberFormatsLocal
          description: ''
          type:
            - 'string[][]'
  - uid: 'ExcelScript!ExcelScript.Range#setPredefinedCellStyle:member(1)'
    summary: 'Representa el estilo del rango actual. Si los estilos de las celdas son incoherentes, se devolverá null. Para los estilos personalizados, se devolverá el nombre del estilo. Para los estilos integrados, se devolverá una cadena que representa un valor en la enumeración BuiltInStyle.'
    name: setPredefinedCellStyle(predefinedCellStyle)
    fullName: setPredefinedCellStyle(predefinedCellStyle)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setPredefinedCellStyle(predefinedCellStyle: string): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: predefinedCellStyle
          description: ''
          type:
            - string
  - uid: 'ExcelScript!ExcelScript.Range#setRowHidden:member(1)'
    summary: Representa si todas las filas del rango actual están ocultas.
    name: setRowHidden(rowHidden)
    fullName: setRowHidden(rowHidden)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setRowHidden(rowHidden: boolean): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: rowHidden
          description: ''
          type:
            - boolean
  - uid: 'ExcelScript!ExcelScript.Range#setValue:member(1)'
    summary: 'Establece el valor sin formato del intervalo especificado. Los datos que se están configurando podrían ser de tipo String, Number o Boolean. `null`el valor se omitirá (no se establece o se sobrescribirá en Excel). Si el rango contiene varias celdas, todas las celdas del rango dado se actualizarán con los datos de entrada.'
    name: setValue(value)
    fullName: setValue(value)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setValue(value: any): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: value
          description: ''
          type:
            - any
  - uid: 'ExcelScript!ExcelScript.Range#setValues:member(1)'
    summary: 'Representa los valores sin formato del rango especificado. Los datos devueltos pueden ser de tipo cadena, número o booleano. Las celdas que contienen un error devolverán la cadena de error.'
    name: setValues(values)
    fullName: setValues(values)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'setValues(values: any[][]): void;'
      return:
        type:
          - void
        description: |-


          #### <a name="examples"></a>Ejemplos

          ```javascript
          /**
           * This sample inserts some pre-loaded data into a range.
           * It also shows how to get a range that fits the data.
           */
           function main(workbook: ExcelScript.Workbook) {
             // Get the active cell.
             let currentCell = workbook.getActiveCell();
             
             // Calculate the range needed to fit the given data.
             let targetRange = currentCell.getResizedRange(DATA.length - 1, DATA[0].length - 1);

             // Set range values to the data.
             targetRange.setValues(DATA);

             // Autofit the columns so the worksheet is readable. 
             targetRange.getFormat().autofitColumns();
           }

           /* 
            * This sample's data is in a static 2-dimensional array.
            * You could also get the input from other ranges or sources.
            * Note that each row must have the same number of columns to be valid. 
            */
           const DATA = [
             ['Date', 'Salesperson', 'Product', 'Amount']
             , ['3/2/2020', 'Anne', 'Pizza', '$1400']
             , ['3/2/2020', 'Mariya', 'Pizza', '$1700']
             , ['3/7/2020', 'Mark', 'Sandwiches', '$1010']
             , ['3/24/2020', 'Anne', 'Pizza', '$750']
             , ['3/28/2020', 'Mark', 'Salads', '$510']
             , ['4/17/2020', 'Laura', 'Salads', '$900']
             , ['4/17/2020', 'Mariya', 'Salads', '$1600']
             , ['4/28/2020', 'Laura', 'Sandwiches', '$680']
           ];
          ```
      parameters:
        - id: values
          description: ''
          type:
            - 'any[][]'
  - uid: 'ExcelScript!ExcelScript.Range#showCard:member(1)'
    summary: Muestra la tarjeta de una celda activa si tiene contenido de valor enriquecido.
    name: showCard()
    fullName: showCard()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showCard(): void;'
      return:
        type:
          - void
        description: ''
  - uid: 'ExcelScript!ExcelScript.Range#showGroupDetails:member(1)'
    summary: Muestra los detalles del grupo de filas o columnas.
    name: showGroupDetails(groupOption)
    fullName: showGroupDetails(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'showGroupDetails(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Especifica si se muestran detalles de filas agrupadas o columnas agrupadas.
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#ungroup:member(1)'
    summary: Desagrupa las columnas y las filas de un esquema.
    name: ungroup(groupOption)
    fullName: ungroup(groupOption)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'ungroup(groupOption: GroupOption): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: groupOption
          description: Especifica cómo se puede desagrupar el rango por filas o columnas.
          type:
            - 'ExcelScript!ExcelScript.GroupOption:enum'
  - uid: 'ExcelScript!ExcelScript.Range#unmerge:member(1)'
    summary: Separa las celdas del intervalo en celdas independientes.
    name: unmerge()
    fullName: unmerge()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'unmerge(): void;'
      return:
        type:
          - void
        description: ''
references:
  - uid: 'ExcelScript!ExcelScript.ConditionalFormat:interface'
    name: ConditionalFormat
    fullName: ExcelScript.ConditionalFormat
  - uid: 'ExcelScript!ExcelScript.ConditionalFormatType:enum'
    name: ConditionalFormatType
    fullName: ExcelScript.ConditionalFormatType
  - uid: 'ExcelScript!ExcelScript.Range#autoFill~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.AutoFillType:enum'
    name: AutoFillType
    fullName: ExcelScript.AutoFillType
  - uid: 'ExcelScript!ExcelScript.ClearApplyTo:enum'
    name: ClearApplyTo
    fullName: ExcelScript.ClearApplyTo
  - uid: 'ExcelScript!ExcelScript.Range#copyFrom~0:complex'
    name: Range | RangeAreas | string
    fullName: ExcelScript.Range | ExcelScript.RangeAreas | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | '
        fullName: ' | '
      - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
        name: RangeAreas
        fullName: ExcelScript.RangeAreas
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.RangeCopyType:enum'
    name: RangeCopyType
    fullName: ExcelScript.RangeCopyType
  - uid: 'ExcelScript!ExcelScript.DeleteShiftDirection:enum'
    name: DeleteShiftDirection
    fullName: ExcelScript.DeleteShiftDirection
  - uid: 'ExcelScript!ExcelScript.Range:interface'
    name: Range
    fullName: ExcelScript.Range
  - uid: 'ExcelScript!ExcelScript.SearchCriteria:interface'
    name: SearchCriteria
    fullName: ExcelScript.SearchCriteria
  - uid: 'ExcelScript!ExcelScript.Range#getBoundingRect~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.Range#getConditionalFormats~0:complex'
    name: 'ConditionalFormat[]'
    fullName: 'ExcelScript.ConditionalFormat[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.ConditionalFormat:interface'
        name: ConditionalFormat
        fullName: ExcelScript.ConditionalFormat
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.DataValidation:interface'
    name: DataValidation
    fullName: ExcelScript.DataValidation
  - uid: 'ExcelScript!ExcelScript.RangeFormat:interface'
    name: RangeFormat
    fullName: ExcelScript.RangeFormat
  - uid: 'ExcelScript!ExcelScript.RangeHyperlink:interface'
    name: RangeHyperlink
    fullName: ExcelScript.RangeHyperlink
  - uid: 'ExcelScript!ExcelScript.Range#getIntersection~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.LinkedDataTypeState:enum'
    name: LinkedDataTypeState
    fullName: ExcelScript.LinkedDataTypeState
  - uid: 'ExcelScript!ExcelScript.Range#getLinkedDataTypeStates~0:complex'
    name: 'LinkedDataTypeState[][]'
    fullName: 'ExcelScript.LinkedDataTypeState[][]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.LinkedDataTypeState:enum'
        name: LinkedDataTypeState
        fullName: ExcelScript.LinkedDataTypeState
      - name: '[][]'
        fullName: '[][]'
  - uid: 'ExcelScript!ExcelScript.Range#getPivotTables~0:complex'
    name: 'PivotTable[]'
    fullName: 'ExcelScript.PivotTable[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.PivotTable:interface'
        name: PivotTable
        fullName: ExcelScript.PivotTable
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.RangeSort:interface'
    name: RangeSort
    fullName: ExcelScript.RangeSort
  - uid: 'ExcelScript!ExcelScript.RangeAreas:interface'
    name: RangeAreas
    fullName: ExcelScript.RangeAreas
  - uid: 'ExcelScript!ExcelScript.SpecialCellType:enum'
    name: SpecialCellType
    fullName: ExcelScript.SpecialCellType
  - uid: 'ExcelScript!ExcelScript.SpecialCellValueType:enum'
    name: SpecialCellValueType
    fullName: ExcelScript.SpecialCellValueType
  - uid: 'ExcelScript!ExcelScript.Range#getTables~0:complex'
    name: 'Table[]'
    fullName: 'ExcelScript.Table[]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Table:interface'
        name: Table
        fullName: ExcelScript.Table
      - name: '[]'
        fullName: '[]'
  - uid: 'ExcelScript!ExcelScript.RangeValueType:enum'
    name: RangeValueType
    fullName: ExcelScript.RangeValueType
  - uid: 'ExcelScript!ExcelScript.Range#getValueTypes~0:complex'
    name: 'RangeValueType[][]'
    fullName: 'ExcelScript.RangeValueType[][]'
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.RangeValueType:enum'
        name: RangeValueType
        fullName: ExcelScript.RangeValueType
      - name: '[][]'
        fullName: '[][]'
  - uid: 'ExcelScript!ExcelScript.RangeView:interface'
    name: RangeView
    fullName: ExcelScript.RangeView
  - uid: 'ExcelScript!ExcelScript.Worksheet:interface'
    name: Worksheet
    fullName: ExcelScript.Worksheet
  - uid: 'ExcelScript!ExcelScript.GroupOption:enum'
    name: GroupOption
    fullName: ExcelScript.GroupOption
  - uid: 'ExcelScript!ExcelScript.InsertShiftDirection:enum'
    name: InsertShiftDirection
    fullName: ExcelScript.InsertShiftDirection
  - uid: 'ExcelScript!ExcelScript.Range#moveTo~0:complex'
    name: Range | string
    fullName: ExcelScript.Range | string
    spec.typeScript:
      - uid: 'ExcelScript!ExcelScript.Range:interface'
        name: Range
        fullName: ExcelScript.Range
      - name: ' | string'
        fullName: ' | string'
  - uid: 'ExcelScript!ExcelScript.RemoveDuplicatesResult:interface'
    name: RemoveDuplicatesResult
    fullName: ExcelScript.RemoveDuplicatesResult
  - uid: 'ExcelScript!ExcelScript.ReplaceCriteria:interface'
    name: ReplaceCriteria
    fullName: ExcelScript.ReplaceCriteria